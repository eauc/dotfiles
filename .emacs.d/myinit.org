#+STARTUP: overview

* Global config

** Files & buffers

   Place all backup files in user home.
   #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist `(("." . "~/.saves")))
   #+END_SRC

   Automatically reload buffers pointing to modified files.
   #+BEGIN_SRC emacs-lisp
   (use-package autorevert
     :config
     (global-auto-revert-mode))
   #+END_SRC

** UI tweaks

   Theme.
   #+BEGIN_SRC emacs-lisp
   (setq custom-enabled-themes (quote (deeper-blue)))
   (setq ansi-color-names-vector
         ["#212526" "#ff4b4b" "#b4fa70" "#fce94f" "#729fcf" "#ad7fa8" "#8cc4ff" "#eeeeec"])
   #+END_SRC

   Hide toolbar.
   #+BEGIN_SRC emacs-lisp
   (tool-bar-mode -1)
   #+END_SRC

   Display line numbers.
   #+BEGIN_SRC emacs-lisp
   (global-linum-mode 1)
   (set-face-foreground 'linum "hot pink")
   #+END_SRC

   Highlight current line.
   #+BEGIN_SRC emacs-lisp
   (global-hl-line-mode 1)
   #+END_SRC

   Hide fringe.
   #+BEGIN_SRC emacs-lisp
   (fringe-mode -1)
   #+END_SRC

   Display column number in mode line.
   #+BEGIN_SRC emacs-lisp
   (setq column-number-mode t)
   #+END_SRC

   Display time in mode line.
   #+BEGIN_SRC emacs-lisp
   (display-time-mode 1)
   #+END_SRC

   Highlight matching parens.
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode)
   #+END_SRC

   Shorter yes-or-no prompt.
   #+BEGIN_SRC emacs-lisp
   (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

   Usefull on small screen to split windows vertically
   #+BEGIN_SRC emacs-lisp
   ;; (setq split-height-threshold nil)
   ;; (setq split-width-threshold 200)
   #+END_SRC

   Set default font size.
   #+BEGIN_SRC emacs-lisp
   ;; (set-face-attribute 'default nil :height 100)
   #+END_SRC

   Discover Emacs functions.
   #+BEGIN_SRC emacs-lisp
   (use-package discover
     :ensure t
     :config
     (global-discover-mode 1))
   #+END_SRC

   Menu suggestions.
   - enable partial matching.
   #+BEGIN_SRC emacs-lisp
   (use-package flx-ido
     :ensure t
     :config
     (ido-mode 1)
     (flx-ido-mode 1)
     :custom
     (ido-everywhere 1)
     (ido-enable-flex-matching t "Enable flexible string matching")
     (ido-use-faces nil "Show flx-ido highlighting"))
   #+END_SRC

   PERL regexp everywhere.
   #+BEGIN_SRC emacs-lisp
   (use-package pcre2el
     :ensure t
     :config
     (pcre-mode 1))
   #+END_SRC

   Rainbow delimiters.
   #+BEGIN_SRC emacs-lisp
   (use-package rainbow-delimiters
     :ensure t
     :hook (prog-mode . rainbow-delimiters-mode)
     :custom-face
     (rainbow-delimiters-depth-1-face ((t (:foreground "green" :weight bold))))
     (rainbow-delimiters-depth-2-face ((t (:foreground "magenta" :weight bold))))
     (rainbow-delimiters-depth-3-face ((t (:foreground "yellow" :weight normal))))
     (rainbow-delimiters-depth-4-face ((t (:foreground "dodger blue" :weight bold))))
     (rainbow-delimiters-depth-5-face ((t (:foreground "chocolate" :weight bold))))
     (rainbow-delimiters-depth-6-face ((t (:foreground "SpringGreen1" :weight bold))))
     (rainbow-delimiters-depth-7-face ((t (:foreground "magenta" :weight bold))))
     (rainbow-delimiters-depth-8-face ((t (:foreground "green" :weight bold))))
     (rainbow-delimiters-depth-9-face ((t (:foreground "dodger blue" :weight bold))))
     (rainbow-delimiters-unmatched-face ((t (:inverse-video t :weight bold)))))
   #+END_SRC

   Remember/suggest commands between sessions.
   #+BEGIN_SRC emacs-lisp
   (use-package smex
     :ensure t
     :bind ("M-x" . smex)
     :custom
     (smex-save-file (concat user-emacs-directory ".smex-items"))
     :config
     (smex-initialize))
   #+END_SRC

   Shorten buffer names but keep uniqueness.
   #+BEGIN_SRC emacs-lisp
   (use-package uniquify
     :custom
     (uniquify-buffer-name-style 'post-forward "Eg. name|bar/mumble"))
   #+END_SRC

   Display available key bindings.
   #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :ensure t
     :config (which-key-mode))
   #+END_SRC

** Scroll

   - keep 8 lignes between cursor & edge of screen.
   - smooth scrolling x100.
   #+BEGIN_SRC emacs-lisp
   (setq scroll-margin 8)
   (setq scroll-conservatively 100)
   #+END_SRC

   Hide default scrollbar.
   #+BEGIN_SRC emacs-lisp
   (scroll-bar-mode -1)
   #+END_SRC

   Nyancat scrollbar.
   #+BEGIN_SRC emacs-lisp
   (use-package nyan-mode
     :ensure t
     :config
     (nyan-mode 1))

   (setq scroll-margin 8)
   (setq scroll-conservatively 100)
   #+END_SRC

** Search

   Search ignore case.
   #+BEGIN_SRC emacs-lisp
   (setq case-fold-search t)
   #+END_SRC

** Global keybindings

   Emacs interprets =C-m= as =RET=. Disable this.
   #+BEGIN_SRC emacs-lisp
   (define-key input-decode-map [?\C-m] [C-m])
   #+END_SRC

   Common bindings.
   #+BEGIN_SRC emacs-lisp
   (global-set-key "\C-z"            'advertised-undo)
   (global-set-key "\C-l"            'goto-line)
   (global-set-key (kbd "<RET>")     'newline-and-indent)
   (global-set-key (kbd "<C-prior>") 'previous-buffer)
   (global-set-key (kbd "<C-next>")  'next-buffer)
   (global-set-key (kbd "<C-m>")     'kmacro-call-macro)
   (global-set-key (kbd "<M-left>")  'back-to-indentation)
   #+END_SRC

   <Fn> keys.
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-a")  'hydra-main/body)
   (global-set-key (kbd "<f2>")    'save-buffer)
   (global-set-key (kbd "<C-f2>")  'write-file)
   (global-set-key (kbd "<f3>")    'other-window)
   (global-set-key (kbd "<C-f3>")  'buffer-menu-other-window)
   (global-set-key (kbd "<S-f3>")  'ido-switch-buffer)
   (global-set-key (kbd "<f4>")    'comment-or-uncomment-region)
   (global-set-key (kbd "<C-f4>")  'eauc/indent-buffer)
   (global-set-key (kbd "<f10>")   'kill-this-buffer)
   (global-set-key (kbd "<C-f10>") 'save-buffers-kill-terminal)
   #+END_SRC

   Example of custom keymap.
   #+BEGIN_SRC emacs-lisp
     ;; (progn
     ;;   ;; define a prefix keymap
     ;;   (define-prefix-command 'my-modes-key-map)
     ;;   (define-key my-modes-key-map (kbd "a") 'eauc/align-array))
     ;; (global-set-key (kbd "C-e")      my-modes-key-map)
   #+END_SRC

   Enable chords globally.
   #+BEGIN_SRC emacs-lisp
   ;; (use-package use-package-chords
   ;;   :ensure t
   ;;   :config 
   ;;   (key-chord-mode 1)
   ;;   (key-chord-define-global "jy" 'aya-create)
   ;;   (key-chord-define-global "jt" 'aya-expand))
   #+END_SRC

* Custom functions

** Indent-buffer

   Indent current buffer.
   Remove trailing whitespace.
   Convert tabs to space.
   #+BEGIN_SRC emacs-lisp
   (defun eauc/indent-buffer ()
     "Indent an entire buffer using the default intenting scheme."
     (interactive)
     (save-excursion
       (delete-trailing-whitespace)
       (indent-region (point-min) (point-max) nil)
       (untabify (point-min) (point-max))))
   #+END_SRC

** Sudo

   Re-open current file with sudo.
   #+BEGIN_SRC emacs-lisp
   (defun eauc/sudo ()
     "Use TRAMP to `sudo' the current buffer"
     (interactive)
     (when buffer-file-name
       (find-alternate-file
        (concat "/sudo:root@localhost:"
                buffer-file-name))))
   #+END_SRC

** Tangle current org file

   Function used to auto-tangle org files on save.
   - disable lock-files creation during auto-tangle as this messes with webpack's watcher :(

   #+BEGIN_SRC emacs-lisp
   (defun eauc/tangle-current-org-file ()
     (when (string= (message "%s" major-mode) "org-mode")
       (let ((create-lockfiles nil))
         (org-babel-tangle))))
   #+END_SRC

* Directory browser

  Standard dired:
  - hide details when opening dired buffer.
  #+BEGIN_SRC emacs-lisp
  (defun eauc/dired-init ()
    "Init dired buffer."
    (dired-hide-details-mode))

  (use-package dired
    :after (hydra)
    :hook (dired-mode . eauc/dired-init)
    :bind (:map dired-mode-map
                ("s-z" . 'hydra-dired/body))
    :init
    (defhydra hydra-dired (:color red)
      "

  Dired
  =========
  "
      ("i" dired-subtree-insert "insert subtree" :column "Fold")
      ("k" dired-subtree-remove "remove subtree")
      ("f" dired-subtree-end "filter")
      ("<up>" dired-previous-line "move up" :column "Move")
      ("<down>" dired-next-line "move down")
      ("b" dired-subtree-beginning "subtree beginning")
      ("e" dired-subtree-end "subtree end")
      ("q" nil "quit"))
    :custom
    (dired-auto-revert-buffer t "revert dired buffer on revisit"))
  #+END_SRC

  Embedded subtrees.
  #+BEGIN_SRC emacs-lisp
  (use-package dired-subtree
    :after (dired)
    :ensure t
    :pin melpa
    :custom
    (dired-subtree-use-backgrounds nil "Do not use background color for subtrees"))
  #+END_SRC

  Filter trees.
  #+BEGIN_SRC emacs-lisp
  (use-package dired-filter
    :after (dired)
    :ensure t
    :pin melpa)
  #+END_SRC

* Edition

  Move cursor by subword.
  #+BEGIN_SRC emacs-lisp
  (use-package subword
    :config
    (global-subword-mode))
  #+END_SRC

  Show trailing whitespace.
  #+BEGIN_SRC emacs-lisp
  (setq-default show-trailing-whitespace t)
  #+END_SRC

** Bookmarks

   #+BEGIN_SRC emacs-lisp
   (use-package breadcrumb
     :after (hydra)
     :load-path  "~/.emacs.d/breadcrumb/"
     :config
     (defhydra hydra-breadcrumb (:color blue)
       "

   Breadcrumb
   ==========
   "
       ("<down>" bc-next "next" :column "Move")
       ("<up>" bc-previous "prev")
       ("S-<down>" bc-local-next "next (local)")
       ("S-<up>" bc-local-previous "prev (local)")
       ("l" bc-list "list" :column "---")
       ("s" bc-set "set")
       ("c" bc-clear "clear")
       ("q" nil "quit")))
   #+END_SRC

** Completion

   Hippie auto-complete.
   #+BEGIN_SRC emacs-lisp
   ;; Lisp-friendly hippie expand
   (setq hippie-expand-try-functions-list
         '(try-expand-dabbrev
           try-expand-dabbrev-all-buffers
           try-expand-dabbrev-from-kill
           try-complete-lisp-symbol-partially
           try-complete-lisp-symbol))
   #+END_SRC

   Company mode for Clojure.
   #+BEGIN_SRC emacs-lisp
   (use-package company
     :ensure t
     :hook
     ((cider-repl-mode . company-mode)
      (cider-mode . company-mode)
      (typescript-mode . company-mode))
     :custom
     (company-idle-delay nil "Only complete if requested"))
   #+END_SRC

   Completion from git.
   #+BEGIN_SRC emacs-lisp
   (use-package git-complete
     :load-path "~/.emacs.d/git-complete/")
   #+END_SRC

** Delete

   Hungry delete whitespace.
   #+BEGIN_SRC emacs-lisp
   (use-package hungry-delete
     :ensure t
     :config
     (global-hungry-delete-mode))
   #+END_SRC

   Reduce multiple spaces to one space.
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "<S-SPC>")   'just-one-space)
   #+END_SRC

** Fold

   #+BEGIN_SRC emacs-lisp
   (use-package hideshow
     :config
     (add-hook 'prog-mode-hook #'hs-minor-mode))
   #+END_SRC

** Indent

   Automatic indentation.
   #+BEGIN_SRC emacs-lisp
   (electric-indent-mode +1)
   #+END_SRC

   Indent with space.
   #+BEGIN_SRC emacs-lisp
   (setq-default indent-tabs-mode nil)
   #+END_SRC

   Default indent size.
   #+BEGIN_SRC emacs-lisp
   (setq standard-indent 2)
   #+END_SRC

   Nested groups.
   #+BEGIN_SRC emacs-lisp
   (setq custom-buffer-indent 2)
   #+END_SRC

   Web mode specifics.
   #+BEGIN_SRC emacs-lisp
   (setq web-mode-code-indent-offset 2)
   (setq web-mode-css-indent-offset 2)
   (setq web-mode-markup-indent-offset 2)
   #+END_SRC

** Jump

   Jump to word.
   #+BEGIN_SRC emacs-lisp
   (use-package avy
     :ensure t)
   #+END_SRC

   Jump to definition.
   #+BEGIN_SRC emacs-lisp
   (use-package dumb-jump
     :ensure t)
   #+END_SRC

** Kill ring

   Navigate kill ring with =M-y=.
   #+BEGIN_SRC emacs-lisp
   (use-package browse-kill-ring
     :ensure t
     :config
     (browse-kill-ring-default-keybindings))
   #+END_SRC

** Mark

   Visible mark.
   #+BEGIN_SRC emacs-lisp
   (use-package visible-mark
     :ensure t
     :custom
     (visible-mark-max 5 "Maximum highlighted marks backwards")
     :config
     (global-visible-mark-mode 1))
   #+END_SRC

   Back button.
   #+BEGIN_SRC emacs-lisp
     ;; (use-package back-button
     ;;   :ensure t
     ;;   :config
     ;;   (back-button-mode 1))
   #+END_SRC

** Multicursors

   #+BEGIN_SRC emacs-lisp
      (use-package mc-extras
        :ensure t)

      (use-package multiple-cursors
        :after (hydra)
        :ensure t
        :bind ()
        :config
        (defhydra hydra-multicursors (:color blue)
          "

   Jump
   ========
   "
          (">" mc/mark-next-like-this "next like this" :column "Mark")
          ("<" mc/mark-previous-like-this "prev like this")
          ("a" mc/mark-all-like-this "all like this")
          ("f" mc/mark-all-like-this-in-defun "all like this (defun)")
          ("d" mc/mark-all-like-this-dwim "all like this (dwim)")
          ("[" mc/edit-beginnings-of-lines "beg of lines")
          ("]" mc/edit-ends-of-lines "end of lines")
          ("b" mc/cycle-backward "cycle backward" :column "Move")
          ("f" mc/cycle-forward "cycle forward")
          ("i" mc/insert-numbers "insert numbers" :column "Edit")
          ("u" mc/remove-current-cursor "remove current")
          ("q" nil "quit")))
   #+END_SRC

** Snippets

   Yasnippets.
   #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
     :after (hydra)
     :ensure t
     :custom
     (yas-snippet-dirs '("~/.emacs.d/mysnippets"))
     (yas-prompt-functions '(yas-ido-prompt) "Use ido in yasnippet prompt")
     :config
     (yas-global-mode 1)
     (define-key yas-minor-mode-map (kbd "<tab>") nil)
     (define-key yas-minor-mode-map (kbd "TAB") nil)
     (defhydra hydra-yasnippet (:color blue)
       "

   YaSnippets
   ==========
   "
       ("d" yas-load-directory "directory" :column "Load")
       ("f" yas-visit-snippet-file "file")
       ("a" yas-reload-all "reload all")
       ("e" yas-expand "expand" :column "Actions")
       ("i" yas-insert-snippet "insert")
       ("n" yas-new-snippet "new")
       ("t" yas-tryout-snippet "try")
       ("l" yas-describe-tables "list" :column "Others")
       ("q" nil "Quit")))
   #+END_SRC

   Auto-yasnippet.
   #+BEGIN_SRC emacs-lisp
   (use-package auto-yasnippet
     :ensure t)
   #+END_SRC

** Miscellaneous

   #+BEGIN_SRC emacs-lisp
   (use-package crux
     :ensure t
     :bind (("s-i" . crux-find-user-init-file)
            ("s-j" . crux-top-join-line)))
   #+END_SRC

   Cycle quotes type.
   #+BEGIN_SRC emacs-lisp
   (use-package cycle-quotes
     :pin gnu
     :ensure t
     :bind (("C-'" . cycle-quotes)))
   #+END_SRC

   Expand selected region.
   #+BEGIN_SRC emacs-lisp
   (use-package expand-region
     :ensure t
     :bind (("C-=" . er/expand-region)))
   #+END_SRC

* Git

** Magit

   #+BEGIN_SRC emacs-lisp
   (use-package magit
     :after (hydra)
     :ensure t
     :config
     (defhydra hydra-git (:color blue)
       "

   Git
   ==========
   "
       ("b" magit-blame "blame" :column "Info")
       ("c" git-messenger:popup-message "commit msg")
       ("s" magit-status "status")
       ("t" git-timemachine "time-machine")
       ("g" git-gutter-mode "gutter on/off" :column "Hunks")
       ("n" git-gutter:next-hunk "next")
       ("p" git-gutter:previous-hunk "previous")
       ("f" (progn (goto-char (point-min))
                   (git-gutter:next-hunk 1)) "first")
       ("l" (progn (goto-char (point-min))
                   (git-gutter:previous-hunk 1)) "last")
       ("s" git-gutter:stage-hunk "stage")
       ("r" git-gutter:revert-hunk "revert")
       ("q" nil :color blue)))
   #+END_SRC

** Time machine

   Step through file history.
   #+BEGIN_SRC emacs-lisp
     (use-package git-timemachine
       :ensure t)
   #+END_SRC

** Messenger

   Display last git commit message for current line.
   #+BEGIN_SRC emacs-lisp
     (use-package git-messenger
       :ensure t
       :custom
       (git-messenger:show-detail t))
   #+END_SRC

** Config mode

   Mode to edit git config files.
   #+BEGIN_SRC emacs-lisp
     (use-package gitconfig-mode
       :ensure t)
   #+END_SRC

** Gutter

   Git gutter displays git hunks in Emacs' fringe.
   - enable with hydra-git/gutter
   - require compatibility with line numbers display

   #+BEGIN_SRC emacs-lisp
   (use-package git-gutter
     :after (hydra)
     :ensure t
     :config
     (git-gutter:linum-setup))
   #+END_SRC

* Languages
** Flycheck

   Some needed support package...
   #+BEGIN_SRC emacs-lisp
   (use-package let-alist
     :ensure t
     :pin gnu)

   (use-package exec-path-from-shell
     :ensure t
     :config
     (exec-path-from-shell-initialize))
   #+END_SRC

   Flycheck:
   - enable for all buffers.
   - disable jshint checker for javascript.
   #+BEGIN_SRC emacs-lisp
   (use-package flycheck
     :after (hydra)
     :ensure t
     :hook
     (after-init . global-flycheck-mode)
     :config
     (setq-default flycheck-disabled-checkers
                   (append flycheck-disabled-checkers
                           '(javascript-jshint)))
     (flycheck-add-mode 'javascript-eslint 'web-mode)
     (flycheck-add-mode 'javascript-eslint 'js-mode)
     (flycheck-add-mode 'javascript-eslint 'js2-mode)
     (flycheck-add-mode 'javascript-eslint 'js2-jsx-mode)
     (defhydra hydra-flycheck (:color blue :columns 2)
       "

   Errors
   ===========
   "
       ("f" flycheck-first-error "first")
       ("l" flycheck-list-errors "list")
       ("n" flycheck-next-error "next")
       ("p" flycheck-previous-error "previous")
       ("v" flycheck-verify-setup "verify setup")
       ("q" nil "quit")))
   #+END_SRC

** Clojure
*** Mode

    Clojure.
    #+BEGIN_SRC emacs-lisp
    (defun eauc/clojure-mode-init ()
      "Initialize Clojure mode."
      (setq inferior-lisp-program "lein repl"))

    (use-package clojure-mode
      :after (hydra)
      :ensure t
      :mode (("\\.clj\\'" . clojure-mode)
             ("\\.edn\\'" . clojure-mode))
      :hook
      (clojure-mode . eauc/clojure-mode-init)
      :bind (:map clojure-mode-map
                  ("s-z" . hydra-clj/body))
      :init
      (defhydra hydra-clj (:color blue)
        "

    Clojure
    =======
    "
        ("c" hydra-clj-cider/body "cider")
        ("r" hydra-cljr-help-menu/body "refactor"))
      :custom
      (clojure-indent-style :align-arguments))

    (use-package clojure-mode-extra-font-locking
      :ensure t)
    #+END_SRC

    Clojurescript.
    #+BEGIN_SRC emacs-lisp
    (use-package clojurescript-mode
      :ensure t
      :pin marmalade
      :mode ("\\.cljs\\'" . clojurescript-mode))
    #+END_SRC

*** Flycheck

    #+BEGIN_SRC emacs-lisp
    (use-package flycheck-clojure
      :after (cider)
      :ensure t)
    #+END_SRC

*** Refactor

    #+BEGIN_SRC emacs-lisp
    (defun eauc/clojure-refactor-init ()
      "Initialize Clojure refactor."
      (message "eauc/clojure-refactor-init")
      (clj-refactor-mode 1)
      (defhydra hydra-cljr-ns-menu (:color blue :hint nil)
        "
         Ns related refactorings
        ------------------------------------------------------------------------------------------------------------------------------------------------------
        _ai_: Add import to ns                             _am_: Add missing libspec                          _ap_: Add project dependency
        _ar_: Add require to ns                            _au_: Add use to ns                                _cn_: Clean ns
        _rm_: Require a macro into the ns                  _sr_: Stop referring
        "
        ("ai" cljr-add-import-to-ns) ("am" cljr-add-missing-libspec)
        ("ap" cljr-add-project-dependency) ("ar" cljr-add-require-to-ns)
        ("au" cljr-add-use-to-ns) ("cn" cljr-clean-ns)
        ("rm" cljr-require-macro) ("sr" cljr-stop-referring)
        ("q" nil "quit"))

      (defhydra hydra-cljr-code-menu (:color blue :hint nil)
        "
         Code related refactorings
        ------------------------------------------------------------------------------------------------------------------------------------------------------
        _ci_: Cycle if                                     _ct_: Cycle thread
        _dk_: Destructure keys                             _el_: Expand let                                   _fu_: Find usages
        _il_: Introduce let                                _is_: Inline symbol                                _ml_: Move to let
        _pf_: Promote function                             _rl_: Remove let                                   _rs_: Rename symbol
        _tf_: Thread first all                             _th_: Thread                                       _tl_: Thread last all
        _ua_: Unwind all                                   _uw_: Unwind
        "
        ("ci" clojure-cycle-if) ("ct" cljr-cycle-thread)
        ("dk" cljr-destructure-keys) ("el" cljr-expand-let)
        ("fu" cljr-find-usages) ("il" cljr-introduce-let)
        ("is" cljr-inline-symbol) ("ml" cljr-move-to-let)
        ("pf" cljr-promote-function) ("rl" cljr-remove-let)
        ("rs" cljr-rename-symbol) ("tf" clojure-thread-first-all)
        ("th" clojure-thread) ("tl" clojure-thread-last-all)
        ("ua" clojure-unwind-all) ("uw" clojure-unwind)
        ("q" nil "quit"))

      (defhydra hydra-cljr-project-menu (:color blue :hint nil)
        "
         Project related refactorings
        ------------------------------------------------------------------------------------------------------------------------------------------------------
        _ap_: Add project dependency                       _cs_: Change function signature                    _fu_: Find usages
        _hd_: Hotload dependency                           _is_: Inline symbol                                _mf_: Move form
        _pc_: Project clean                                _rf_: Rename file-or-dir _rs_: Rename symbol       _sp_: Sort project dependencies
        _up_: Update project dependencies
        "
        ("ap" cljr-add-project-dependency) ("cs" cljr-change-function-signature)
        ("fu" cljr-find-usages) ("hd" cljr-hotload-dependency)
        ("is" cljr-inline-symbol) ("mf" cljr-move-form)
        ("pc" cljr-project-clean) ("rf" cljr-rename-file-or-dir)
        ("rs" cljr-rename-symbol) ("sp" cljr-sort-project-dependencies)
        ("up" cljr-update-project-dependencies) ("q" nil "quit"))

      (defhydra hydra-cljr-toplevel-form-menu (:color blue :hint nil)
        "
         Toplevel form related refactorings
        ------------------------------------------------------------------------------------------------------------------------------------------------------
        _as_: Add stubs for the interface/protocol at point_cp_: Cycle privacy                                _cs_: Change function signature
        _ec_: Extract constant                             _ed_: Extract form as def                          _ef_: Extract function
        _fe_: Create function from example                 _is_: Inline symbol                                _mf_: Move form
        _pf_: Promote function                             _rf_: Rename file-or-dir                           _ad_: Add declaration
        "
        ("as" cljr-add-stubs) ("cp" clojure-cycle-privacy)
        ("cs" cljr-change-function-signature) ("ec" cljr-extract-constant)
        ("ed" cljr-extract-def) ("ef" cljr-extract-function)
        ("fe" cljr-create-fn-from-example) ("is" cljr-inline-symbol)
        ("mf" cljr-move-form) ("pf" cljr-promote-function)
        ("rf" cljr-rename-file-or-dir) ("ad" cljr-add-declaration) ("q" nil "quit"))

      (defhydra hydra-cljr-cljr-menu (:color pink :hint nil)
        "
         Cljr related refactorings
        ------------------------------------------------------------------------------------------------------------------------------------------------------
        _sc_: Show the project's changelog                 _?_: Describe refactoring
        "
        ("sc" cljr-show-changelog) ("?" cljr-describe-refactoring) ("q" nil "quit"))

      (defhydra hydra-cljr-help-menu (:color pink :hint nil)
        "
        Available refactoring types
        -----------------------------------------------------------------------------
        _n_: Ns related refactorings      _c_: Code related refactorings
        _p_: Project related refactorings _t_: Top level forms related refactorings
        _s_: Refactor related functions
        "

        ("n" hydra-cljr-ns-menu/body :exit t)
        ("c" hydra-cljr-code-menu/body :exit t)
        ("p" hydra-cljr-project-menu/body :exit t)
        ("t" hydra-cljr-toplevel-form-menu/body :exit t)
        ("s" hydra-cljr-cljr-menu/body :exit t)
        ("q" nil "quit" :color blue)))

    (use-package clj-refactor
      :after (hydra)
      :ensure t
      :defer t
      :hook
      (clojure-mode . eauc/clojure-refactor-init)
      :custom
      (cljr-auto-sort-ns nil)
      (cljr-favor-prefix-notation nil))
    #+END_SRC

*** Cider

    #+BEGIN_SRC emacs-lisp
    (defun eauc/cider-pprint-eval-last-sexp ()
      (interactive)
      (cider-pprint-eval-last-sexp t))

    (defun eauc/cider-pprint-eval-defun-at-point ()
      (interactive)
      (cider-pprint-eval-last-sexp t))

    (use-package cider
      :after (hydra)
      :pin melpa-stable
      :ensure t
      :defer t
      :hook
      ((clojure-mode . cider-mode)
       (cider-mode . eldoc-mode))
      :init
      (defhydra hydra-clj-cider (:color blue)
        "

    CLJ - Cider
    ===========
    "
        ("c" cider-connect "connect" :column "Connect")
        ("jc" cider-jack-in "jack-in clj")
        ("js" cider-jack-in-clojurescript "jack-in cljs")
        ("d" cider-doc "Doc")
        ("r" cider-switch-to-repl-buffer "switch to REPL")
        ("q" nil "quit")
        ("fv" cider-find-var "var" :column "Find")
        ("fn" cider-find-ns "ns")
        ("fb" cider-pop-back "back")
        ("m1" cider-macroexpand-1 "macro-expand-1" :column "Macros")
        ("ma" cider-macroexpand-all "macro-expand-all")
        ("l" cider-load-buffer "load file" :column "Eval")
        ("n" cider-eval-ns-form "eval ns form")
        ("u" cider-undef "undef symbol")
        ("pl" eauc/cider-pprint-eval-last-sexp "execute & print last sexp" :column "Print")
        ("pt" eauc/cider-pprint-eval-defun-at-point "execute & print top sexp")
        ("xl" cider-eval-last-sexp "execute last sexp" :column "Execute")
        ("xp" cider-eval-sexp-at-point "execute sexp at point")
        ("xr" cider-eval-last-sexp-to-repl "execute last sexp to REPL")
        ("tr" cider-test-run-test "at point" :column "Tests")
        ("tn" cider-test-run-ns-tests "ns")
        ("tp" cider-test-run-project-tests "project")
        ("tf" cider-test-rerun-failed-tests "re-run failed")
        ("tt" cider-test-rerun-test "re-run last")
        ("ts" cider-test-show-report "show report"))
      :config
      (flycheck-clojure-setup)
      :custom
      (cider-repl-pop-to-buffer-on-connect t)
      (cider-repl-history-file "~/.emacs.d/cider-history" "REPL history file")
      (cider-repl-use-pretty-printing t "nice pretty printing")
      (cider-repl-use-clojure-font-lock t "nicer font lock in REPL")
      (cider-repl-result-prefix " ;; => " "result prefix for the REPL")
      (cider-repl-wrap-history t "never ending REPL history")
      (cider-repl-history-size 3000 "looong history")
      (cider-show-error-buffer t "error buffer not popping up")
      (cider-auto-select-error-buffer nil "error buffer not popping up"))
    #+END_SRC

** Cucumber

   #+BEGIN_SRC emacs-lisp
   (use-package feature-mode
     :ensure t
     :mode ("\\.feature\\'" . feature-mode))
   #+END_SRC

** Docker

   Mode to edit docker files.
   #+BEGIN_SRC emacs-lisp
   (use-package dockerfile-mode
     :ensure t
     :mode ("\\Dockerfile\\'" . dockerfile-mode))
   #+END_SRC

   Docker integration.
   #+BEGIN_SRC emacs-lisp
   (use-package docker
     :ensure t)
   #+END_SRC

** Emacs-lisp

   #+BEGIN_SRC emacs-lisp
   (add-hook 'emacs-lisp-mode-hook 
     (lambda()
       (setq mode-name "ℰ"))) 
   #+END_SRC

** Env

   #+BEGIN_SRC emacs-lisp
   (use-package dotenv-mode
     :ensure t
     :mode ("\\.env\\'" . dotenv-mode))
   #+END_SRC

** Haskell

   #+BEGIN_SRC emacs-lisp
   (use-package haskell-mode
     :ensure t
     :mode ("\\.hs\\'" . haskell-mode))
   #+END_SRC
   
** Javascript

*** Mode

    JS2 mode:
    - add mocha package key bindings to js2 mode.
    #+BEGIN_SRC emacs-lisp
    (use-package js2-mode
      :after (hydra)
      :ensure t
      :interpreter (("node" . js2-jsx-mode))
      :mode (("\\.js\\'" . js2-jsx-mode)
             ("\\.es6\\'" . js2-jsx-mode))
      :bind (:map js2-mode-map
                  ("M-." . nil)
                  ("s-z" . 'hydra-js/body))
      :init
      (defhydra hydra-js (:color blue)
        "

    Javascript
    ==========
    "
        ("m." mocha-test-at-point "test at point" :column "Mocha")
        ("mf" mocha-test-file "test file")
        ("mp" mocha-test-project "test project")
        ("ni" npm-mode-npm-install "install" :column "Npm")
        ("ns" npm-mode-npm-install-save "install -save" :column "Npm")
        ("nd" npm-mode-npm-install-save-dev "install -dev" :column "Npm")
        ("nl" npm-mode-npm-list "list" :column "Npm")
        ("nn" npm-mode-npm-init "init" :column "Npm")
        ("nr" npm-mode-npm-run "run" :column "Npm")
        ("nu" npm-mode-npm-uninstall "uninstall" :column "Npm")
        ("nv" npm-mode-visit-project-file "visit package.json" :column "Npm")
        ("r" hydra-js-refactor/body "refactor" :column "---"))
      :custom
      (js2-bounce-indent-p nil)
      (js2-mode-indent-ignore-first-tab t)
      (js2-include-node-externs t)
      (js-indent-level 2)
      (jsx-indent-level 2)
      (js2-highlight-level 3)
      (js2-mode-assume-strict 3)
      (js2-strict-trailing-comma-warning nil)
      :custom-face
      (js2-error ((t (:foreground "red"))))
      (js2-external-variable ((t (:foreground "orchid"))))
      (js2-function-param ((t (:foreground "lime green"))))
      (js2-private-function-call ((t (:foreground "dark orange")))))
    #+END_SRC

    RJSX mode for JSX files.
    #+BEGIN_SRC emacs-lisp
    (use-package rjsx-mode
      :pin melpa
      :ensure t
      :interpreter (("node" . rjsx-mode))
      :mode (("\\.jsx\\'" . rjsx-mode)))
    #+END_SRC

*** Indium

    #+BEGIN_SRC emacs-lisp
    (use-package indium
      :ensure t
      :hook
      ((js-mode . indium-interaction-mode)
       (js2-mode . indium-interaction-mode)
       (rjsx-mode . indium-interaction-mode)))
    #+END_SRC

*** REPL

    #+BEGIN_SRC emacs-lisp
    (use-package nodejs-repl
      :ensure t)
    #+END_SRC

*** Mocha

    #+BEGIN_SRC emacs-lisp
    (use-package mocha
      :ensure t
      :commands (mocha-test-at-point
                 mocha-test-file
                 mocha-test-project)
      :custom
      (mocha-command "./node_modules/.bin/mocha"))
    #+END_SRC

*** Npm

    #+BEGIN_SRC emacs-lisp
    (use-package npm-mode
      :ensure t
      :hook
      ((js-mode . npm-mode)
       (js2-mode . npm-mode)
       (rjsx-mode . npm-mode)))
    #+END_SRC

    Adds project's =node_modules/.bin= to buffer's PATH.
    This allows to call local packages command from the buffer.
    Used eg by flycheck to run a local eslint !
    #+BEGIN_SRC emacs-lisp
    (use-package add-node-modules-path
      :load-path  "~/.emacs.d/add-node-modules-path/"
      :hook
      ((js-mode . add-node-modules-path)
       (js2-mode . add-node-modules-path)
       (rjsx-mode . add-node-modules-path)))
    #+END_SRC

*** Refactor

    #+BEGIN_SRC emacs-lisp
    (use-package js2-refactor
      :after (hydra)
      :ensure t
      :hook
      ((js-mode . js2-refactor-mode)
       (js2-mode . js2-refactor-mode)
       (rjsx-mode . js2-refactor-mode))
      :init
      (defhydra hydra-js-refactor (:color teal)
        "

    JS  - refactor
    ==============
    "
        ("ef" js2r-extract-function "extract" :column "Function")
        ("em" js2r-extract-method "extract method")
        ("ip" js2r-introduce-parameter "add param")
        ("lp" js2r-localize-parameter "param→local")
        ("tf" js2r-toggle-function-expression-and-declaration "name↔var")
        ("ta" js2r-toggle-arrow-function-and-expression "arrow↔function")
        ("ts" js2r-toggle-function-async "toggle async")
        ("ao" js2r-arguments-to-object "args→object")
        ("wi" js2r-wrap-buffer-in-iife "wrap buffer" :column "IIFE")
        ("ig" js2r-inject-global-in-iife "inject global")
        ("lt" js2r-log-this "log this" :column "Log/Debug")
        ("dt" js2r-debug-this "debug this")
        ("ee" js2r-expand-node-at-point "show" :color red :column "Misc")
        ("cc" js2r-contract-node-at-point "hide" :color red)
        ("ck" js2r-kill "kill" :color red)
        ("S-<up>" js2r-move-line-up "move line up" :color red)
        ("S-<down>" js2r-move-line-down "move line down" :color red)
        ("q" nil "quit")
        ("ss" js2r-split-string "split" :column "String")
        ("st" js2r-string-to-template "str→template")
        ("ba" js2r-forward-barf "barf" :column "Transformations" :color red)
        ("sl" js2r-forward-slurp "slurp" :color red)
        ("ti" js2r-ternary-to-if "ternary→if")
        ("uw" js2r-unwrap "unwrap")
        ("wl" js2r-wrap-in-for-loop "wrap in for")
        ("ev" js2r-extract-var "→ var" :column "Var")
        ("el" js2r-extract-let "→ let")
        ("ec" js2r-extract-const "→ const")
        ("iv" js2r-inline-var "inline")
        ("rv" js2r-rename-var "rename")
        ("vt" js2r-var-to-this "var→this")
        ("ag" js2r-add-to-globals-annotation "add global annotation")
        ("sv" js2r-split-var-declaration "split declaration"))
      :config
      (js2r-add-keybindings-with-prefix "C-c <return>"))
    #+END_SRC

*** Navigation

    #+BEGIN_SRC emacs-lisp
    (use-package xref-js2
      :ensure t
      :hook
      (js2-mode . (lambda ()
                    (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t))))
    #+END_SRC

** JSON

   #+BEGIN_SRC emacs-lisp
   (use-package json-mode
     :ensure t
     :mode "\\.json\\'")
   #+END_SRC

   Major mode for jq scripts.
   - call jq-interactively in JSON buffer to evaluate jq filter on buffer.
   #+BEGIN_SRC emacs-lisp
   (use-package jq-mode
     :ensure t
     :mode ("\\.jq\\'" . jq-mode))
   #+END_SRC
** Lisp

   #+BEGIN_SRC emacs-lisp
   (defun eauc/lispy-activate ()
     "Activate lispy mode."
     (lispy-mode 1))

   (use-package lispy
     :ensure t
     :bind (:map lispy-mode-map
                 ("M-[" . lispy-backward)
                 ("M-]" . lispy-forward)
                 ;; ("(" . self-insert-command)
                 (")" . self-insert-command)
                 ;; ("{" . self-insert-command)
                 ("}" . self-insert-command)
                 ("[" . self-insert-command)
                 ("]" . self-insert-command)
                 (";" . self-insert-command)
                 ("\"" . self-insert-command)
                 ("DEL" . backward-delete-char-untabify)
                 ("M-DEL" . lispy-delete-backward))
     :hook
     ((emacs-lisp-mode . eauc/lispy-activate)
      (clojure-mode . eauc/lispy-activate)
      (clojurescript-mode . eauc/lispy-activate)))
   #+END_SRC

** Markdown

   Major mode to edit markdown.
   #+BEGIN_SRC emacs-lisp
   (use-package markdown-mode
     :ensure t
     :commands (markdown-mode gfm-mode)
     :mode (("README\\.md\\'" . gfm-mode)
            ("\\.md\\'" . markdown-mode)
            ("\\.mdx\\'" . markdown-mode)
            ("\\.markdown\\'" . markdown-mode))
     :bind (:map markdown-mode-map
                 ("s-z" . 'dh-hydra-markdown-mode/body))
     :init
     (setq markdown-command "multimarkdown")
     (defhydra dh-hydra-markdown-mode (:hint nil)
       "
   Formatting        C-c C-s    _s_: bold          _e_: italic     _b_: blockquote   _p_: pre-formatted    _c_: code
   Headings          C-c C-t    _h_: automatic     _1_: h1         _2_: h2           _3_: h3               _4_: h4
   Lists             C-c C-x    _m_: insert item
   Demote/Promote    C-c C-x    _l_: promote       _r_: demote     _u_: move up      _d_: move down
   Links, footnotes  C-c C-a    _L_: link          _U_: uri        _F_: footnote     _W_: wiki-link      _R_: reference
   "

       ("s" markdown-insert-bold)
       ("e" markdown-insert-italic)
       ("b" markdown-insert-blockquote :color blue)
       ("p" markdown-insert-pre :color blue)
       ("c" markdown-insert-code)

       ("h" markdown-insert-header-dwim)
       ("1" markdown-insert-header-atx-1)
       ("2" markdown-insert-header-atx-2)
       ("3" markdown-insert-header-atx-3)
       ("4" markdown-insert-header-atx-4)

       ("m" markdown-insert-list-item)

       ("l" markdown-promote)
       ("r" markdown-demote)
       ("d" markdown-move-down)
       ("u" markdown-move-up)

       ("L" markdown-insert-link :color blue)
       ("U" markdown-insert-uri :color blue)
       ("F" markdown-insert-footnote :color blue)
       ("W" markdown-insert-wiki-link :color blue)
       ("R" markdown-insert-reference-link-dwim :color blue)))
   #+END_SRC
** PHP

   #+BEGIN_SRC emacs-lisp
   (use-package php-mode
     :ensure t)
   #+END_SRC

** PlantUML

   #+BEGIN_SRC emacs-lisp
   (use-package plantuml-mode
     :ensure t
     :mode ("\\.plantuml\\'" . plantuml-mode))
   #+END_SRC

** SCSS

   #+BEGIN_SRC emacs-lisp
   (use-package scss-mode
     :ensure t
     :mode "\\.scss\\'"
     :custom
     (scss-compile-at-save nil "disable auto-compilation on save"))
   #+END_SRC

** Typescript

   Major mode for TS buffers.
   #+BEGIN_SRC emacs-lisp
   (use-package typescript-mode
     :ensure t
     :mode ("\\.ts\\'" . typescript-mode)
     :custom
     (typescript-indent-level 2))
   #+END_SRC

   TS IDE.
   #+BEGIN_SRC emacs-lisp
   (defun setup-tide-mode ()
       (interactive)
       (message "setup-tide-mode")
       (tide-setup)
       (flycheck-mode +1)
       (setq flycheck-check-syntax-automatically '(save mode-enabled))
       (eldoc-mode +1)
       (tide-hl-identifier-mode +1))

   (use-package tide
     :after (flycheck typescript-mode hydra)
     :ensure t
     :hook
     ((typescript-mode . setup-tide-mode)
      (typescript-mode . tide-hl-identifier-mode))
     :bind (:map typescript-mode-map
                 ("s-z" . 'hydra-tide/body))
     :init
     (defhydra hydra-tide (:color blue)
         "

   Tide
   =========
   "
         ("." tide-jump-to-definition "to definition" :column "Jump")
         ("," tide-jump-back "back")
         ("dd" tide-documentation-at-point "doc" :column "Doc")
         ("dj" tide-documentation-at-point "jsdoc")
         ("es" tide-project-errors "show" :column "Error")
         ("ef" tide-fix "fix error")
         ("ed" tide-add-tslint-disable-next-line "tslint disable")
         ("rr" tide-refactor "refactor" :column "Refactor")
         ("rs" tide-rename-symbol "rename symbol")
         ("rf" tide-rename-file "rename file")
         ("ri" tide-organize-imports "sort imports")))
   #+END_SRC

** YAML

   #+BEGIN_SRC emacs-lisp
   (use-package yaml-mode
     :ensure t
     :mode ("\\.ya?ml\\'" . yaml-mode))
   #+END_SRC

* Org

  Replace Emacs default org package with last distribution.
  #+BEGIN_SRC emacs-lisp
  (use-package org
    :after (hydra)
    :pin org
    :ensure org-plus-contrib
    :bind (:map org-mode-map
                ("s-z" . hydra-org/body))
    :hook
    (after-save . eauc/tangle-current-org-file)
    :custom
    (org-confirm-babel-evaluate nil "no confirmation before running code in blocks")
    (org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar" "Ditaa jar path")
    (org-edit-src-content-indentation 0 "number of spaces added to indentation at begining of source block")
    (org-html-htmlize-output-type 'css "Export emacs theme to css classes")
    (org-plantuml-jar-path "/usr/share/plantuml/plantuml.jar" "Plantuml jar path")
    (org-src-fontify-natively t "code block syntax highlighting")
    (org-src-tab-acts-natively t "use language indent rules in code blocks")
    (org-startup-truncated nil "truncate lines at window edge")
    :init
    (defhydra hydra-org (:color blue)
      "

  Org
  ========
  "
      ("fe" org-export-dispatch "export" :column "File")
      ("ft" org-babel-tangle "tangle")
      ("ii" org-toggle-inline-images "toggle inline" :column "Images")
      ("ir" org-redisplay-inline-images "refresh")
      ("li" org-insert-link "add/edit" :column "Links")
      ("lo" org-open-at-point "open")
      ("to" org-todo "add/next" :column "TODO")
      ("h" hydra-org-header/body "headers" :column "---")
      ("ls" hydra-org-list/body "lists")
      ("ta" hydra-org-table/body "tables")
      ("q" nil "quit"))
    (defhydra hydra-org-header (:color blue)
      "

  Org - Header
  ============
  "

      ("f" org-cycle "cycle" :column "Fold")
      ("F" org-shifttab "cycle all")
      ("n" org-next-visible-heading "next (any lvl)" :column "Move")
      ("p" org-previous-visible-heading "prev (any lvl)")
      ("N" org-forward-heading-same-level "next (same lvl)")
      ("P" org-backward-heading-same-level "previous (same lvl)")
      ("t" outline-up-heading "to top lvl")
      ("S-<left>" org-metaleft "decrease" :column "Indentation")
      ("S-<right>" org-metaright "increase")
      ("q" nil "quit"))
    (defhydra hydra-org-list (:color blue)
      "

  Org - List
  ==========
  "

      ("c" org-shiftleft "cycle bullet type" :column "Edit")
      ("w" org-metaup "move ↓")
      ("s" org-metadown "move ↓")
      ("q" nil "quit")
      ("S-<left>" org-metaleft "decrease" :column "Indentation")
      ("S-<right>" org-metaright "inrease")
      ("M-<left>" org-shiftmetaleft "decrease +children")
      ("M-<right>" org-shiftmetaright "inrease +children")
      ("<up>" org-shiftup "cursor ↑" :column "Move")
      ("<down>" org-shiftdown "cursor ↓"))
    (defhydra hydra-org-table (:color blue)
      "

  Org - Table
  ===========
  "

      ("S-<left>" org-metaleft "move left" :column "Columns")
      ("S-<right>" org-metaright "move right")
      ("M-<right>" org-shiftmetaright "insert left")
      ("M-<left>" org-shiftmetaleft "kill")
      ("s" org-sort "sort")
      ("q" nil "quit")
      ("S-<up>" org-metaup "move up" :column "Rows")
      ("S-<down>" org-metadown "move down")
      ("M-<down>" org-shiftmetadown "insert above")
      ("M-<up>" org-shiftmetaup "kill")
      ("-" org-ctrl-c-minus "insert line below"))
    :config
    (add-to-list 'org-src-lang-modes '("jsx" . rjsx))
    (add-to-list 'org-src-lang-modes '("js" . js2))
    (add-to-list 'org-src-lang-modes '("javascript" . js))
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell . t)
       (js . t)
       (emacs-lisp . t)
       (calc . t)
       ;; (perl . t)
       ;; (scala . t)
       (clojure . t)
       (ditaa . t)
       (python . t)
       (ruby . t)
       (dot . t)
       (css . t)
       (plantuml . t))))
  #+END_SRC

** Bullets

   UTF-8 bullets.
   #+BEGIN_SRC emacs-lisp
   (defun eauc/org-bullets-activate ()
     "Activate org bullets."
     (org-bullets-mode 1))

   (use-package org-bullets
     :ensure t
     :hook
     (org-mode . eauc/org-bullets-activate))
   #+END_SRC

** Babel

   Javascript support.
   #+BEGIN_SRC emacs-lisp
   (use-package ob-javascript
     :load-path "~/.emacs.d/ob-javascript/"
     :custom
     (ob-javascript:browser-binary "/opt/google/chrome/chrome")
     (org-babel-clojure-backend 'cider "Use CIDER to evaluate clojure source blocks"))
   #+END_SRC

** Exports

   Confluence wiki.
   #+BEGIN_SRC emacs-lisp
   ;; (use-package ox-confluence
   ;;   :load-path "~/.emacs.d/org-ox-confluence/")
   #+END_SRC

   BB code.
   #+BEGIN_SRC emacs-lisp
   ;; (use-package ox-bbcode
   ;;      :load-path "~/.emacs.d/org-ox-bbcode/")
   #+END_SRC

   Latex beamer presentations.
   #+BEGIN_SRC emacs-lisp
   (require 'ox-latex)
   (add-to-list 'org-latex-classes
                '("beamer"
                  "\\documentclass\[presentation\]\{beamer\}"
                  ("\\section\{%s\}" . "\\section*\{%s\}")
                  ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
                  ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))
   #+END_SRC

   Markdown.
   #+BEGIN_SRC emacs-lisp
   (require 'ox-md)
   #+END_SRC

   Reveal.js presentations.
   #+BEGIN_SRC emacs-lisp
   (use-package ox-reveal
     :pin melpa
     :ensure t
     :custom
     (org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/" "where to get revealJS lib")
     (org-reveal-mathjax t "enable latex formulae in presentations"))
   #+END_SRC

   PDF.
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'org-latex-classes
                '("djcb-org-article"
                  "\\documentclass[11pt,a4paper]{article}
                \\usepackage{minted}
                \\usemintedstyle{emacs}
                \\newminted{common-lisp}{fontsize=10}
                        \\usepackage[T1]{fontenc}
                        \\usepackage{hyperref}
                        \\usepackage{fontspec}
                        \\usepackage{graphicx}
                        \\defaultfontfeatures{Mapping=tex-text}
                        \\setromanfont{Gentium}
                        \\setromanfont [BoldFont={Gentium Basic Bold},
                                        ItalicFont={Gentium Basic Italic}]{Gentium Basic}
                        \\setsansfont{Charis SIL}
                        \\setmonofont[Scale=0.8]{DejaVu Sans Mono}
                        \\usepackage{geometry}
                        \\geometry{a4paper, textwidth=6.5in, textheight=10in,
                                    marginparsep=7pt, marginparwidth=.6in}
                        \\pagestyle{empty}
                        \\title{}
                              [NO-DEFAULT-PACKAGES]
                              [NO-PACKAGES]"
                  ("\\section{%s}" . "\\section*{%s}")
                  ("\\subsection{%s}" . "\\subsection*{%s}")
                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                  ("\\paragraph{%s}" . "\\paragraph*{%s}")
                  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

   (setq org-latex-pdf-process 
         '("xelatex --shell-escape -interaction nonstopmode %f"
       "xelatex --shell-escape -interaction nonstopmode %f"))
   #+END_SRC

** Syntax highlighting

   #+BEGIN_SRC emacs-lisp
   (use-package htmlize
     :ensure t)
   #+END_SRC

** Table of contents.

   Generate TOC at top of org files.
   #+BEGIN_SRC emacs-lisp
   ;; (use-package toc-org
   ;;   :ensure t
   ;;   :hook
   ;;   (org-mode . toc-org-enable))
   #+END_SRC

* Projects

  Manage Git projects.
  #+BEGIN_SRC emacs-lisp
  (use-package projectile
    :after (hydra)
    :ensure t
    :config
    (projectile-global-mode)
    ;; (projectile-register-project-type 'npm '("package.json")
    ;;                                :compile "npm install"
    ;;                                :test "npm test"
    ;;                                :run "npm start"
    ;;                                :test-suffix ".spec")
    (defhydra hydra-projectile (:color blue :hint nil)
      "

  Projectile
  ==========
  "
      ("b"   projectile-switch-to-buffer "switch to" :column "Buffers")
      ("i"   projectile-ibuffer "ibuffer")
      ("k"   projectile-kill-buffers "kill all")
      ("d"   projectile-find-dir "dir" :column "Find")
      ("ff"  projectile-find-file "file")
      ("fw"  projectile-find-file-dwim "file dwim")
      ("fd"  projectile-find-file-in-directory "file in dir")
      ("r"   projectile-recentf "recent")
      ("a"   projectile-ag "ag" :column "Search/Tags")
      ("o"   projectile-multi-occur "occur")
      ("p"   projectile-switch-project "switch" :column "Project")
      ("t"   org-todo "add TODO")
      ("w"   hydra-projectile-other-window/body "other window")
      ("q"   nil "cancel"))
    (defhydra hydra-projectile-other-window (:color blue)
      "

  Projectile - Other window
  =========================
  "
      ("ff" projectile-find-file-other-window        "file")
      ("fw" projectile-find-file-dwim-other-window   "file dwim")
      ("fd" projectile-find-dir-other-window         "dir")
      ("b"  projectile-switch-to-buffer-other-window "buffer")
      ("q"  nil                                      "cancel" :color blue))
    :custom
    (projectile-switch-project-action
     #'projectile-dired
     "Open root dir in Dired when switching to project"))
  #+END_SRC

  Capture TODO per projectile project.
  #+BEGIN_SRC emacs-lisp
  (use-package org-projectile
    :ensure t
    :demand t
    :bind (("C-c t" . org-capture))
    :config
    (progn
      (org-projectile-per-project)
      (setq org-projectile-per-project-filepath "TODO.org")
      (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
      (push (org-projectile-project-todo-entry) org-capture-templates)))
  #+END_SRC

* Miscellaneous Tools
** Cheatsheet

   Emacs cheat sheet.
   #+BEGIN_SRC emacs-lisp
   (org-babel-load-file
    (expand-file-name "~/.emacs.d/cheatsheet.org"))

   (defun eauc/cheatsheet ()
     "Display cheatsheet."
     (interactive)
     (cheatsheet-show)
     (goto-char (point-min)))

   (use-package cheatsheet
     :pin melpa
     :ensure t
     :bind (("<f8>" . eauc/cheatsheet))
     :config
     (eauc/cheat-commons)
     (eauc/cheat-edition)
     (eauc/cheat-lisp)
     (eauc/cheat-git-timemachine))
   #+END_SRC

** Github

   Clone github repose
   #+BEGIN_SRC emacs-lisp
   (use-package github-clone
     :ensure t)
   #+END_SRC

** Google

   Search in Google.
   #+BEGIN_SRC emacs-lisp
   (use-package google-this
     :after (hydra)
     :ensure t
     :init
     (defhydra hydra-google (:color blue)
       "

   Google this
   ===========
   "
       ("." google-this-region "region")
       ("e" google-this-error "error")
       ("l" google-this-lucky-search "lucky"))
     :config
     (google-this-mode 1))
   #+END_SRC

** Hydra

   Hydra main binding.
   #+BEGIN_SRC emacs-lisp
   (use-package hydra
     :ensure t
     :custom
     (hydra-is-helpful t "show hints")
     (hydra-lv t "show hints in separate window")
     (lv-use-separator t "draw line between ibuffer and hint window")
     :config


     (defhydra hydra-main (:color blue :columns 5)
       "

   Topics
   ======
   "
       ("." xref-find-definitions "jump to definition" :column "0")
       ("," xref-pop-marker-stack "jump back")
       ("?" xref-find-references "find references")
       ("b" hydra-breadcrumb/body "breadcrumb" :column "1")
       ("c" hydra-completion/body "completion")
       ("ed" hydra-edit/body "edit")
       ("er" hydra-flycheck/body "error")
       ("ff" find-file "file find" :column "2")
       ("fs" save-buffer "file save")
       ("fw" write-file "file write")
       ("fo" hydra-fold/body "fold")
       ("j" hydra-jump/body "jump" :column "3")
       ("gi" hydra-git/body "git")
       ("go" hydra-google/body "google")
       ("ma" hydra-macro/body "macros" :column "4")
       ("mc" hydra-multicursors/body "multi-cursors")
       ("p" hydra-projectile/body "project")
       ("r" hydra-rectangle/body "rectangles")
       ("w" hydra-window/body "window" :column "5")
       ("y" hydra-yasnippet/body "yasnippet")
       ("z" hydra-zoom/body "zoom")
       ("<f8>" eauc/cheatsheet "cheatsheet"))


     (defhydra hydra-completion (:color blue)
       "

   Completion
   ==========
   "
       ("c" company-complete "company")
       ("g" git-complete "git")
       ("h" hippie-expand "hippie")
       ("y" yas-expand "yasnippet")
       ("q" nil "quit" :column nil))


     (defhydra hydra-edit (:color blue)
       "

   Edition
   =======
   "
       ("$" crux-sudo-edit "sudo edit" :column "File")
       ("i" crux-find-user-init-file "find init file")
       ("ol" crux-smart-open-line "open line" :column "Line")
       ("oa" crux-smart-open-line-above "open line above")
       ("j" crux-top-join-line "join line")
       ("k" crux-kill-whole-line "kill whole line")
       ("<" crux-move-beginning-of-line "move beg of line")
       ("=" er/expand-region "expand" :column "Region")
       ("n" narrow-to-region "narrow")
       ("w" widen "widen")
       ("q" nil "quit" :color blue))


     (defhydra hydra-fold (:color blue)
       "

   Fold
   =======
   "
       ("h" hs-hide-block "hide block" :column "Hide/Show")
       ("s" hs-show-block "show block")
       ("M-h" hs-hide-all "hide all")
       ("M-s" hs-show-all "show all")
       ("q" nil "quit" :column "---"))


     (defhydra hydra-jump (:color blue)
       "

   Jump
   ========
   "
       ("w" avy-goto-word-1 "goto word" :column "General")
       ("bs" bookmark-set "set" :column "Bookmark")
       ("bj" bookmark-jump "jump")
       ("ms" set-mark-command "set" :column "Mark")
       ("mp" pop-to-mark-command "pop")
       ("mg" pop-global-mark "pop-global")
       ("sj" dumb-jump-go "jump" :column "Symbols")
       ("so" dumb-jump-go-other-window "jump other window")
       ("s." dumb-jump-back "jump back")
       ("q" nil "quit" :column nil))


     (defhydra hydra-macro (:hint nil :color blue :pre
                                  (when defining-kbd-macro
                                    (kmacro-end-macro 1)))
       "

   Macros
   ========
   "
       ("q" nil "quit")
       ("st" kmacro-start-macro "start" :column "Def/Exec")
       ("es" kmacro-step-edit-macro "step-edit")
       ("en" kmacro-end-or-call-macro-repeat "end")
       ("x" kmacro-end-or-call-macro-repeat "execute" :color pink)
       ("r" kmacro-edit-macro-repeat "repeat" :color pink)
       ("a" apply-macro-to-region-lines "apply region")
       ("ci" kmacro-insert-counter "insert" :column "Counter")
       ("cs" kmacro-set-counter "set")
       ("ca" kmacro-add-counter "add")
       ("cf" kmacro-set-format "set format")
       ("ep" kmacro-edit-macro "previous" :column "Edit")
       ("en" edit-kbd-macro "next")
       ("p" kmacro-cycle-ring-previous "previous" :column "Ring")
       ("n" kmacro-cycle-ring-next "next")
       ("w" kmacro-swap-ring "swap")
       ("d" kmacro-delete-ring-head "delete head")
       ("sn" kmacro-name-last-macro "name last" :column "Save")
       ("sb" kmacro-bind-to-key "bind to key")
       ("sd" insert-kbd-macro "defun")
       ("sr" kmacro-to-register "register"))


     (defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                                          :color pink
                                          :columns 3
                                          :post (deactivate-mark))
       "

   Rectangles
   ==========
   "
       ("e" exchange-point-and-mark "point↔mark")
       ("c" copy-rectangle-as-kill "copy")
       ("d" delete-rectangle "delete")
       ("r" (if (region-active-p)
                (deactivate-mark)
              (rectangle-mark-mode 1)) "reset")
       ("y" yank-rectangle "yank")
       ("u" undo "undo")
       ("s" string-rectangle "replace w/ string")
       ("k" kill-rectangle "kill")
       ("q" nil "quit"))


     (defhydra hydra-window (:color blue :hint nil)
       "

   Window
   =========
   "
       ("q" nil)
       ("db" kill-this-buffer "buffer" :column "Delete")
       ("do" delete-other-windows "other window" :exit t)
       ("da" ace-delete-window "ace window")
       ("dw" delete-window "window")
       ("nf" new-frame :column "Frame" :exit t)
       ("df" delete-frame :exit t)
       ("s" ace-swap-window "swap window" :column "Move")
       ("S-<left>" windmove-left "move left")
       ("S-<right>" windmove-right "move right")
       ("S-<down>" windmove-down "move down")
       ("S-<up>" windmove-up "move up")
       ("v" split-window-right "right" :column "Split")
       ("|" (lambda ()
              (interactive)
              (split-window-right)
              (windmove-right)) "right & move")
       ("x" split-window-below "below")
       ("_" (lambda ()
              (interactive)
              (split-window-below)
              (windmove-down)) "below & move")
       ("j" shrink-window-horizontally "left" :column "Resize")
       ("k" enlarge-window-horizontally "right")
       ("m" enlarge-window "down")
       ("i" shrink-window "up")
       ("a" ace-window :column "Misc" :exit t))


     (defhydra hydra-zoom (:color blue)
       "

   Zoom
   =========
   "
       ("+" text-scale-increase "in")
       ("-" text-scale-decrease "out")
       ("0" (text-scale-adjust 0) "reset")
       ("q" nil "quit")))
   #+END_SRC

** Minions

   Minor-modes menu.
   #+BEGIN_SRC emacs-lisp
   (use-package minions
     :ensure t
     :config
     (minions-mode t))
   #+END_SRC

** Rest Client

   Package to make HTTP request.
   #+BEGIN_SRC emacs-lisp
   (use-package restclient
     :after (hydra)
     :ensure t
     :pin melpa
     :mode ("\\.http\\'" . restclient-mode)
     :bind (:map restclient-mode-map
                 ("s-z" . hydra-restclient/body))
     :init
     (defhydra hydra-restclient (:color blue)
       "

   Restclient
   ==========
   "
       ("r" restclient-http-send-current "run" :column "Run")
       ("s" restclient-http-send-current-stay-in-window "run & stay")
       ("q" nil "quit")
       ("n" restclient-jump-next "next" :column "Move")
       ("p" restclient-jump-prev "prev")
       ("m" restclient-mark-current "mark" :column "Under point")
       ("c" restclient-copy-curl-command "copy as curl")))
   #+END_SRC

** Silversearch

   Silversearch-AG interface.

   #+BEGIN_SRC emacs-lisp
   (use-package ag
     :ensure t)
   #+END_SRC

** Try

   Try emacs packages without installation.
   #+BEGIN_SRC emacs-lisp
   (use-package try
     :ensure t
     :pin melpa)
   #+END_SRC
