#+STARTUP: overview

* Global config

** Files & buffers

   Place all backup files in user home.
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist `(("." . "~/.saves")))
   #+END_SRC

   Automatically reload buffers pointing to modified files.
   #+BEGIN_SRC emacs-lisp
     (global-auto-revert-mode)
   #+END_SRC

** UI tweaks

   Display line numbers.
   #+BEGIN_SRC emacs-lisp
     (global-linum-mode 1)
   #+END_SRC

   Highlight current line.
   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode 1)
   #+END_SRC

   Highlight matching parens.
   #+BEGIN_SRC emacs-lisp
     (show-paren-mode)
   #+END_SRC

   Shorter yes-or-no prompt.
   #+BEGIN_SRC emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

   Usefull on small screen to split windows vertically
   #+BEGIN_SRC emacs-lisp
   ;; (setq split-height-threshold nil)
   ;; (setq split-width-threshold 200)
   #+END_SRC

   Discover Emacs functions.
   #+BEGIN_SRC emacs-lisp
     (use-package discover
       :ensure t
       :config
       (global-discover-mode 1))
   #+END_SRC

   Menu suggestions.
   - enable partial matching.
   #+BEGIN_SRC emacs-lisp
   (ido-mode 1)
   (setq ido-everywhere t)
   (setq ido-enable-flex-matching t)
   (setq ido-auto-merge-work-directories-length -1)
   (setq ido-use-virtual-buffers t)
   #+END_SRC

   PERL regexp everywhere.
   #+BEGIN_SRC emacs-lisp
     (use-package pcre2el
             :ensure t
             :config (pcre-mode 1))
   #+END_SRC

   Rainbow delimiters.
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :init
       (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+END_SRC

   Remember/suggest commands between sessions.
   #+BEGIN_SRC emacs-lisp
     (use-package smex
       :ensure t
       :bind ("M-x" . smex)
       :config
       (setq smex-save-file (concat user-emacs-directory ".smex-items"))
       (smex-initialize))
   #+END_SRC

   Shorten buffer names but keep uniqueness.
   #+BEGIN_SRC emacs-lisp
     (use-package uniquify
       :config
       (setq uniquify-buffer-name-style 'forward))
   #+END_SRC

   Display available key bindings.
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :config (which-key-mode))
   #+END_SRC

** Scroll

   - keep 8 lignes between cursor & edge of screen.
   - smooth scrolling x100.
   #+BEGIN_SRC emacs-lisp
     (setq scroll-margin 8)
     (setq scroll-conservatively 100)
   #+END_SRC

   Nyancat scrollbar.
   #+BEGIN_SRC emacs-lisp
     (use-package nyan-mode
       :ensure t
       :config
       (nyan-mode 1))

     (setq scroll-margin 8)
     (setq scroll-conservatively 100)
   #+END_SRC

** Global keybindings

   Emacs interprets =C-m= as =RET=. Disable this.
   #+BEGIN_SRC emacs-lisp
   (define-key input-decode-map [?\C-m] [C-m])
   #+END_SRC

   Common bindings.
   #+BEGIN_SRC emacs-lisp
     (global-set-key "\C-z"            'advertised-undo)
     (global-set-key "\C-l"            'goto-line)
     (global-set-key (kbd "<RET>")     'newline-and-indent)
     (global-set-key (kbd "<C-prior>") 'previous-buffer)
     (global-set-key (kbd "<C-next>")  'next-buffer)
     (global-set-key (kbd "<C-m>")     'kmacro-call-macro)
     (global-set-key (kbd "<M-left>")  'back-to-indentation)
   #+END_SRC

   Reduce multiple spaces to one space.
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<S-SPC>")   'just-one-space)
   #+END_SRC

   <Fn> keys.
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<f1>")    'find-file)
     (global-set-key (kbd "<f2>")    'save-buffer)
     (global-set-key (kbd "<C-f2>")  'write-file)
     (global-set-key (kbd "<f3>")    'other-window)
     (global-set-key (kbd "<C-f3>")  'buffer-menu-other-window)
     (global-set-key (kbd "<S-f3>")  'ido-switch-buffer)
     (global-set-key (kbd "<f4>")    'comment-or-uncomment-region)
     (global-set-key (kbd "<C-f4>")  'eauc/indent-buffer)
     (global-set-key (kbd "<f5>")    'bookmark-set)
     (global-set-key (kbd "<C-f5>")  'bookmark-jump)
     (global-set-key (kbd "<f6>")    'pop-to-mark-command)
     (global-set-key (kbd "<C-f6>")  'pop-global-mark)
     (global-set-key (kbd "<f10>")   'kill-this-buffer)
     (global-set-key (kbd "<C-f10>") 'save-buffers-kill-terminal)
   #+END_SRC

   Example of custom keymap.
   #+BEGIN_SRC emacs-lisp
   ;; (progn
   ;;   ;; define a prefix keymap
   ;;   (define-prefix-command 'my-modes-key-map)
   ;;   (define-key my-modes-key-map (kbd "a") 'eauc/align-array))
   ;; (global-set-key (kbd "C-e")      my-modes-key-map)
   #+END_SRC

* Custom functions

** Indent-buffer

   Indent current buffer.
   Remove trailing whitespace.
   Convert tabs to space.
   #+BEGIN_SRC emacs-lisp
     (defun eauc/indent-buffer ()
       "Indent an entire buffer using the default intenting scheme."
       (interactive)
       (save-excursion
         (delete-trailing-whitespace)
         (indent-region (point-min) (point-max) nil)
         (untabify (point-min) (point-max))))
   #+END_SRC

** Sudo

   Re-open current file with sudo.
   #+BEGIN_SRC emacs-lisp
     (defun eauc/sudo ()
       "Use TRAMP to `sudo' the current buffer"
       (interactive)
       (when buffer-file-name
         (find-alternate-file
          (concat "/sudo:root@localhost:"
                  buffer-file-name))))
   #+END_SRC

** Tangle current org file

   #+BEGIN_SRC emacs-lisp
     (defun eauc/tangle-current-org-file ()
       (when (string= (message "%s" major-mode) "org-mode")
         (org-babel-tangle)))
   #+END_SRC

* Directory browser

  - hide details when opening dired buffer.
  - do not use background color on subtrees.
  #+BEGIN_SRC emacs-lisp
    (use-package dired
      :init
      (add-hook 'dired-mode-hook
                (lambda ()
                  (dired-hide-details-mode)))
      :config
      (setq dired-subtree-use-backgrounds nil))
  #+END_SRC

  Embedded subtrees.
  #+BEGIN_SRC emacs-lisp
    (use-package dired-subtree
      :ensure t
      :pin melpa
      :bind (:map dired-mode-map
                  ("C-i" . dired-subtree-insert)
                  ("C-k" . dired-subtree-remove)
                  ("C-<up>" . dired-subtree-beginning)
                  ("C-<down>" . dired-subtree-end)))
  #+END_SRC

  Filter trees.
  #+BEGIN_SRC emacs-lisp
    (use-package dired-filter
      :ensure t
      :pin melpa
      :config
      (define-key dired-mode-map (kbd "C-/") dired-filter-map))
  #+END_SRC

* Edition

** Completion

   Hippie auto-complete.
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c x") 'hippie-expand)
     ;; Lisp-friendly hippie expand
     (setq hippie-expand-try-functions-list
           '(try-expand-dabbrev
             try-expand-dabbrev-all-buffers
             try-expand-dabbrev-from-kill
             try-complete-lisp-symbol-partially
             try-complete-lisp-symbol))
   #+END_SRC

   Company mode for Clojure.
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :init
       (add-hook 'cider-repl-mode-hook #'company-mode)
       (add-hook 'cider-mode-hook #'company-mode)
       :bind
       (("C-c c" . company-complete))
       :config
       (setq company-idle-delay nil))
   #+END_SRC

   Completion from git.
   #+BEGIN_SRC emacs-lisp
     (use-package git-complete
       :load-path "~/.emacs.d/git-complete/"
       :bind (("C-<f7>" . git-complete)))
   #+END_SRC

** Jump

   Jump to word.
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :bind (("C-c a" . avy-goto-word-1)))
   #+END_SRC

   Jump to definition.
   #+BEGIN_SRC emacs-lisp
     (use-package dumb-jump
       :ensure t
       :bind (("C-c j o" . dumb-jump-go-other-window)
              ("C-c j g" . dumb-jump-go)
              ("C-c j b" . dumb-jump-back)))
   #+END_SRC

** Kill ring

   Navigate kill ring with =M-y=.
   #+BEGIN_SRC emacs-lisp
     (use-package browse-kill-ring
       :ensure t
       :config
       (browse-kill-ring-default-keybindings))
   #+END_SRC

** Mark

   Visible mark.
   #+BEGIN_SRC emacs-lisp
     (use-package visible-mark
       :ensure t
       :config
       (setq visible-mark-max 5)
       (global-visible-mark-mode 1))
   #+END_SRC

   Back button.
   #+BEGIN_SRC emacs-lisp
     ;; (use-package back-button
     ;;   :ensure t
     ;;   :config
     ;;   (back-button-mode 1))
   #+END_SRC

** Multicursors

   #+BEGIN_SRC emacs-lisp
     (use-package mc-extras
       :ensure t)

     (use-package multiple-cursors
       :ensure t
       :bind (("C-c . >" . mc/mark-next-like-this)
              ("C-c . <" . mc/mark-previous-like-this)
              ("C-c . a" . mc/mark-all-like-this)
              ("C-c . f" . mc/mark-all-like-this-in-defun)
              ("C-c . <left>" . mc/cycle-backward)
              ("C-c . <right>" . mc/cycle-forward)
              ("C-c . [" . mc/edit-beginnings-of-lines)
              ("C-c . ]" . mc/edit-ends-of-lines)
              ("C-c . i" . mc/insert-numbers)
              ;; ("C-c . >" . mc/mark-all-like-this-dwim)
              ("C-c . u" . mc/remove-current-cursor)))
   #+END_SRC

** Snippets

   Yasnippets.
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :config
       (setq yas-snippet-dirs '("~/.emacs.d/mysnippets"))
       (setq yas-prompt-functions '(yas-ido-prompt))
       (yas-global-mode 1)
       (define-key yas-minor-mode-map (kbd "<tab>") nil)
       (define-key yas-minor-mode-map (kbd "TAB") nil)
       (define-key yas-minor-mode-map (kbd "C-c y") 'yas-expand))
   #+END_SRC

** Miscellaneous
   #+BEGIN_SRC emacs-lisp
    (use-package crux
      :ensure t
      :bind (("<S-return>" . crux-smart-open-line)
             ("<s-return>" . crux-smart-open-line-above)
             ("s-$" . crux-sudo-edit)
             ("s-<" . crux-move-beginning-of-line)
             ("s-i" . crux-find-user-init-file)
             ("s-j" . crux-top-join-line)
             ("s-k" . crux-kill-whole-line)))
   #+END_SRC

   Cycle quotes type.
   #+BEGIN_SRC emacs-lisp
    (use-package cycle-quotes
      :pin gnu
      :ensure t
      :bind (("C-'" . cycle-quotes)))
   #+END_SRC

   Expand selected region.
   #+BEGIN_SRC emacs-lisp
    (use-package expand-region
      :ensure t
      :bind (("C-<" . er/expand-region)))
   #+END_SRC

* Git

** Magit

   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :bind (("<f7>" . magit-status)
              ("S-<f7>" . magit-blame)))
   #+END_SRC

** Time machine

   Step through file history.
   #+BEGIN_SRC emacs-lisp
     (use-package git-timemachine
       :ensure t)
   #+END_SRC

** Messenger

   Display last git commit message for current line.
   #+BEGIN_SRC emacs-lisp
     (use-package git-messenger
       :ensure t
       :bind (("s-<f7>" . git-messenger:popup-message))
       :config
       (setq git-messenger:show-detail t))
   #+END_SRC

** Config mode

   Mode to edit git config files.
   #+BEGIN_SRC emacs-lisp
     (use-package gitconfig-mode
       :ensure t)
   #+END_SRC

* Languages
** Flycheck

   Some needed support package...
   #+BEGIN_SRC emacs-lisp
     (use-package let-alist
       :ensure t
       :pin gnu)

     (use-package exec-path-from-shell
       :ensure t
       :config
       (exec-path-from-shell-initialize))
   #+END_SRC

   Flycheck:
   - enable for all buffers.
   - disable jshint checker for javascript.
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :init
       (add-hook 'after-init-hook #'global-flycheck-mode)
       :config
       (setq-default flycheck-disabled-checkers
                     (append flycheck-disabled-checkers
                             '(javascript-jshint)))
       (flycheck-add-mode 'javascript-eslint 'web-mode)
       (flycheck-add-mode 'javascript-eslint 'js-mode)
       (flycheck-add-mode 'javascript-eslint 'js2-mode)
       (flycheck-add-mode 'javascript-eslint 'js2-jsx-mode))
   #+END_SRC

** Clojure
*** COMMENT Mode

    Clojure.
    #+BEGIN_SRC emacs-lisp
      (use-package clojure-mode
        :ensure t
        :mode ("\\.clj\\'" . clojure-mode)
        :init
        (add-hook 'clojure-mode-hook
                  (lambda ()
                    (setq inferior-lisp-program "lein repl")))
        :config
        (setq clojure-indent-style :align-arguments))

      (use-package clojure-mode-extra-font-locking
        :ensure t)
    #+END_SRC

    Clojurescript.
    #+BEGIN_SRC emacs-lisp
      (use-package clojurescript-mode
        :ensure t
        :pin marmalade
        :mode ("\\.cljs\\'" . clojurescript-mode))
    #+END_SRC

*** Flycheck

    #+BEGIN_SRC emacs-lisp
      (use-package flycheck-clojure
        :ensure t)
    #+END_SRC

*** Refactor

    #+BEGIN_SRC emacs-lisp
      (use-package clj-refactor
        :ensure t
        :defer t
        :init
        (add-hook 'clojure-mode-hook
                  (lambda ()
                    (clj-refactor-mode 1)
                    (cljr-add-keybindings-with-prefix "C-c RET")))
        :config
        (setq cljr-auto-sort-ns nil)
        (setq cljr-favor-prefix-notation nil))
    #+END_SRC

*** Cider

    #+BEGIN_SRC emacs-lisp
      (use-package cider
        :pin melpa-stable
        :ensure t
        :defer t
        :init
        (add-hook 'clojure-mode-hook 'cider-mode)
        :config
        (flycheck-clojure-setup)
        (setq cider-repl-pop-to-buffer-on-connect t)
        ;; REPL history file
        (setq cider-repl-history-file "~/.emacs.d/cider-history")
        ;; nice pretty printing
        (setq cider-repl-use-pretty-printing t)
        ;; nicer font lock in REPL
        (setq cider-repl-use-clojure-font-lock t)
        ;; result prefix for the REPL
        (setq cider-repl-result-prefix ";; => ")
        ;; never ending REPL history
        (setq cider-repl-wrap-history t)
        ;; looong history
        (setq cider-repl-history-size 3000)
        ;; error buffer not popping up
        (setq cider-show-error-buffer t)
        (setq cider-auto-select-error-buffer nil)
        ;; eldoc for clojure
        (add-hook 'cider-mode-hook #'eldoc-mode))
    #+END_SRC

** Cucumber

   #+BEGIN_SRC emacs-lisp
     (use-package feature-mode
       :ensure t
       :mode ("\\.feature\\'" . feature-mode))
   #+END_SRC

** Haskell

   #+BEGIN_SRC emacs-lisp
     (use-package haskell-mode
       :ensure t
       :mode ("\\.hs\\'" . haskell-mode))
   #+END_SRC

** Javascript

*** Mode

    JS2 mode:
    - add mocha package key bindings to js2 mode.
    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
        :ensure t
        :mode ("\\.js\\'"  . js2-jsx-mode)
        :mode ("\\.jsx\\'" . js2-jsx-mode)
        :mode ("\\.es6\\'" . js2-jsx-mode)
        :bind (:map js2-mode-map
                    ("C-c m i" . mocha-test-at-point)
                    ("C-c m f" . mocha-test-file)
                    ("C-c m p" . mocha-test-project))
        :config
        (setq js-indent-level 2)
        (setq js2-strict-trailing-comma-warning nil)
        (setq jsx-indent-level 2))
    #+END_SRC

*** Mocha

    #+BEGIN_SRC emacs-lisp
      (use-package mocha
        :ensure t
        :commands (mocha-test-at-point
                   mocha-test-file
                   mocha-test-project)
        :config
        (setq mocha-command "./node_modules/.bin/mocha"))
    #+END_SRC

*** Npm

    #+BEGIN_SRC emacs-lisp
      (use-package npm-mode
        :ensure t
        :config
        (add-hook 'js2-mode-hook #'npm-mode))
    #+END_SRC

*** Refactor

    #+BEGIN_SRC emacs-lisp
      (use-package js2-refactor
        :ensure t
        :config
        (add-hook 'js2-mode-hook #'js2-refactor-mode)
        (js2r-add-keybindings-with-prefix "C-c <return>"))
    #+END_SRC

** JSON

   #+BEGIN_SRC emacs-lisp
     (use-package json-mode
       :ensure t
       :mode "\\.json\\'")
   #+END_SRC

** Lisp

   #+BEGIN_SRC emacs-lisp
     (use-package lispy
       :ensure t
       :bind (:map lispy-mode-map
                   ("M-[" . lispy-backward)
                   ("M-]" . lispy-forward)
                   ;; ("(" . self-insert-command)
                   (")" . self-insert-command)
                   ;; ("{" . self-insert-command)
                   ("}" . self-insert-command)
                   ("[" . self-insert-command)
                   ("]" . self-insert-command)
                   (";" . self-insert-command)
                   ("\"" . self-insert-command)
                   ("DEL" . backward-delete-char-untabify)
                   ("M-DEL" . lispy-delete-backward))
       :init
       (add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1)))
       (add-hook 'clojure-mode-hook (lambda () (lispy-mode 1)))
       (add-hook 'clojurescript-mode-hook (lambda () (lispy-mode 1))))
   #+END_SRC

** PlantUML

   #+BEGIN_SRC emacs-lisp
     (use-package plantuml-mode
       :ensure t
       :mode ("\\.plantuml\\'" . plantuml-mode))
   #+END_SRC

** SCSS

   - disable compilation at save.
   #+BEGIN_SRC emacs-lisp
     (use-package scss-mode
       :ensure t
       :mode "\\.scss\\'"
       :config
       (setq scss-compile-at-save nil))
   #+END_SRC

* Org

  Replace Emacs default org package with last distribution.
  - tangle-on-save-org-mode-file :: auto-tangle org files on save.
  - org-confirm-babel-evaluate :: do not prompt before code block evaluation.
  - org-src-fontify-natively :: code block syntax highlighting.
  - org-src-tab-acts-natively :: use language indent rules in code blocks.
  - org-babel-do-load-languages :: enable default languages.
  #+BEGIN_SRC emacs-lisp
    (use-package org
      :pin org
      :ensure org-plus-contrib
      :init
      (add-hook 'after-save-hook 'eauc/tangle-current-org-file)
      :config
      (setq org-confirm-babel-evaluate nil
            org-plantuml-jar-path "/usr/share/plantuml/plantuml.jar"
            org-src-fontify-natively t
            org-src-tab-acts-natively t)
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((shell . t)
         (js . t)
         (emacs-lisp . t)
         (calc . t)
         ;; (perl . t)
         ;; (scala . t)
         (clojure . t)
         (python . t)
         (ruby . t)
         (dot . t)
         (css . t)
         (plantuml . t))))
  #+END_SRC

** Bullets

   UTF-8 bullets.
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC

** Exports

   Confluence wiki.
   #+BEGIN_SRC emacs-lisp
     (use-package ox-confluence
       :load-path "~/.emacs.d/org-ox-confluence/")
   #+END_SRC

   BB code.
   #+BEGIN_SRC emacs-lisp
     ;; (use-package ox-bbcode
     ;;      :load-path "~/.emacs.d/org-ox-bbcode/")
   #+END_SRC

   Latex beamer presentations.
   #+BEGIN_SRC emacs-lisp
     (require 'ox-latex)
     (add-to-list 'org-latex-classes
                  '("beamer"
                    "\\documentclass\[presentation\]\{beamer\}"
                    ("\\section\{%s\}" . "\\section*\{%s\}")
                    ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
                    ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))
   #+END_SRC

   Markdown.
   #+BEGIN_SRC emacs-lisp
     (require 'ox-md)
   #+END_SRC

   Reveal.js presentations:
   - org-reveal-root :: where to get revealJS lib.
   - org-reveal-mathjax :: enable latex formula in presentations.
   #+BEGIN_SRC emacs-lisp
     (use-package ox-reveal
       :pin melpa
       :ensure t
       :config
       (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
       (setq org-reveal-mathjax t))
   #+END_SRC

** Syntax highlighting

   #+BEGIN_SRC emacs-lisp
     (use-package htmlize
       :ensure t)
   #+END_SRC

** Table of contents.

   Generate TOC at top of org files.
   #+BEGIN_SRC emacs-lisp
     ;; (use-package toc-org
     ;;   :ensure t
     ;;   :init
     ;;   (add-hook 'org-mode-hook 'toc-org-enable))
   #+END_SRC

* Miscellaneous Tools

** Cheatsheet

   Emacs cheat sheet.
   #+BEGIN_SRC emacs-lisp
     (org-babel-load-file
      (expand-file-name "~/.emacs.d/cheatsheet.org"))

     (defun eauc/cheatsheet ()
       "Display cheatsheet."
       (interactive)
       (cheatsheet-show)
       (goto-char (point-min)))

     (use-package cheatsheet
       :pin melpa
       :ensure t
       :bind (("<f8>" . eauc/cheatsheet))
       :config
       (eauc/cheat-commons)
       (eauc/cheat-edition)
       (eauc/cheat-cursors)
       (eauc/cheat-jump)
       (eauc/cheat-completion)
       (eauc/cheat-snippets)
       (eauc/cheat-org)
       (eauc/cheat-clojure)
       (eauc/cheat-javascript)
       (eauc/cheat-lisp)
       (eauc/cheat-git-timemachine)
       (eauc/cheat-google)
       (eauc/cheat-rest-client))
   #+END_SRC

** Google

   Search in Google.
   #+BEGIN_SRC emacs-lisp
     (use-package google-this
       :ensure t
       :config
       (google-this-mode 1))
   #+END_SRC

** Rest Client

   Package to make HTTP request.
   #+BEGIN_SRC emacs-lisp
     (use-package restclient
       :ensure t
       :pin melpa
       :mode ("\\.http\\'" . restclient-mode))
   #+END_SRC

** Try

   Try emacs packages without installation.
   #+BEGIN_SRC emacs-lisp
     (use-package try
       :ensure t
       :pin melpa)
   #+END_SRC

