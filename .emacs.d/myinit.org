#+STARTUP: overview

* Global config

** Files & buffers

   Place all backup files in user home.
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist `(("." . "~/.saves")))
   #+END_SRC

   Automatically reload buffers pointing to modified files.
   #+BEGIN_SRC emacs-lisp
     (global-auto-revert-mode)
   #+END_SRC

** UI tweaks

   Theme.
   #+BEGIN_SRC emacs-lisp
     (setq custom-enabled-themes (quote (deeper-blue)))
     (setq ansi-color-names-vector
           ["#212526" "#ff4b4b" "#b4fa70" "#fce94f" "#729fcf" "#ad7fa8" "#8cc4ff" "#eeeeec"])
   #+END_SRC

   Hide toolbar.
   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
   #+END_SRC

   Display line numbers.
   #+BEGIN_SRC emacs-lisp
     (global-linum-mode 1)
   #+END_SRC

   Highlight current line.
   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode 1)
   #+END_SRC

   Hide fringe.
   #+BEGIN_SRC emacs-lisp
     (fringe-mode -1)
   #+END_SRC

   Display column number in mode line.
   #+BEGIN_SRC emacs-lisp
     (setq column-number-mode t)
   #+END_SRC

   Display time in mode line.
   #+BEGIN_SRC emacs-lisp
     (display-time-mode 1)
   #+END_SRC

   Highlight matching parens.
   #+BEGIN_SRC emacs-lisp
     (show-paren-mode)
   #+END_SRC

   Shorter yes-or-no prompt.
   #+BEGIN_SRC emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

   Usefull on small screen to split windows vertically
   #+BEGIN_SRC emacs-lisp
   ;; (setq split-height-threshold nil)
   ;; (setq split-width-threshold 200)
   #+END_SRC

   Set default font size.
   #+BEGIN_SRC emacs-lisp
   ;; (set-face-attribute 'default nil :height 100)
   #+END_SRC

   Discover Emacs functions.
   #+BEGIN_SRC emacs-lisp
     (use-package discover
       :ensure t
       :config
       (global-discover-mode 1))
   #+END_SRC

   Menu suggestions.
   - enable partial matching.
   #+BEGIN_SRC emacs-lisp
     (use-package flx-ido
       :ensure t
       :config
       (ido-mode 1)
       (flx-ido-mode 1)
       :custom
       (ido-everywhere 1)
       (ido-enable-flex-matching t "Enable flexible string matching")
       (ido-use-faces nil "Show flx-ido highlighting"))
   #+END_SRC

   PERL regexp everywhere.
   #+BEGIN_SRC emacs-lisp
     (use-package pcre2el
       :ensure t
       :config
       (pcre-mode 1))
   #+END_SRC

   Rainbow delimiters.
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :hook (prog-mode . rainbow-delimiters-mode)
       :custom-face
       (rainbow-delimiters-depth-1-face ((t (:foreground "green" :weight bold))))
       (rainbow-delimiters-depth-2-face ((t (:foreground "magenta" :weight bold))))
       (rainbow-delimiters-depth-3-face ((t (:foreground "yellow" :weight normal))))
       (rainbow-delimiters-depth-4-face ((t (:foreground "dodger blue" :weight bold))))
       (rainbow-delimiters-depth-5-face ((t (:foreground "chocolate" :weight bold))))
       (rainbow-delimiters-depth-6-face ((t (:foreground "SpringGreen1" :weight bold))))
       (rainbow-delimiters-depth-7-face ((t (:foreground "magenta" :weight bold))))
       (rainbow-delimiters-depth-8-face ((t (:foreground "green" :weight bold))))
       (rainbow-delimiters-depth-9-face ((t (:foreground "dodger blue" :weight bold))))
       (rainbow-delimiters-unmatched-face ((t (:foreground "red" :weight bold)))))
   #+END_SRC

   Remember/suggest commands between sessions.
   #+BEGIN_SRC emacs-lisp
     (use-package smex
       :ensure t
       :bind ("M-x" . smex)
       :custom
       (smex-save-file (concat user-emacs-directory ".smex-items"))
       :config
       (smex-initialize))
   #+END_SRC

   Shorten buffer names but keep uniqueness.
   #+BEGIN_SRC emacs-lisp
     (use-package uniquify
       :custom
       (uniquify-buffer-name-style 'post-forward "Eg. name|bar/mumble"))
   #+END_SRC

   Display available key bindings.
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :config (which-key-mode))
   #+END_SRC

** Scroll

   - keep 8 lignes between cursor & edge of screen.
   - smooth scrolling x100.
   #+BEGIN_SRC emacs-lisp
     (setq scroll-margin 8)
     (setq scroll-conservatively 100)
   #+END_SRC

   Hide default scrollbar.
   #+BEGIN_SRC emacs-lisp
     (scroll-bar-mode -1)
   #+END_SRC

   Nyancat scrollbar.
   #+BEGIN_SRC emacs-lisp
     (use-package nyan-mode
       :ensure t
       :config
       (nyan-mode 1))

     (setq scroll-margin 8)
     (setq scroll-conservatively 100)
   #+END_SRC

** Search

   Search ignore case.
   #+BEGIN_SRC emacs-lisp
     (setq case-fold-search t)
   #+END_SRC

** Global keybindings

   Emacs interprets =C-m= as =RET=. Disable this.
   #+BEGIN_SRC emacs-lisp
     (define-key input-decode-map [?\C-m] [C-m])
   #+END_SRC

   Common bindings.
   #+BEGIN_SRC emacs-lisp
     (global-set-key "\C-z"            'advertised-undo)
     (global-set-key "\C-l"            'goto-line)
     (global-set-key (kbd "<RET>")     'newline-and-indent)
     (global-set-key (kbd "<C-prior>") 'previous-buffer)
     (global-set-key (kbd "<C-next>")  'next-buffer)
     (global-set-key (kbd "<C-m>")     'kmacro-call-macro)
     (global-set-key (kbd "<M-left>")  'back-to-indentation)
   #+END_SRC

   Reduce multiple spaces to one space.
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<S-SPC>")   'just-one-space)
   #+END_SRC

   <Fn> keys.
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<f1>")    'find-file)
     (global-set-key (kbd "<C-f1>")  'projectile-switch-project)
     (global-set-key (kbd "<f2>")    'save-buffer)
     (global-set-key (kbd "<C-f2>")  'write-file)
     (global-set-key (kbd "<f3>")    'other-window)
     (global-set-key (kbd "<C-f3>")  'buffer-menu-other-window)
     (global-set-key (kbd "<S-f3>")  'ido-switch-buffer)
     (global-set-key (kbd "<f4>")    'comment-or-uncomment-region)
     (global-set-key (kbd "<C-f4>")  'eauc/indent-buffer)
     (global-set-key (kbd "<f5>")    'bookmark-set)
     (global-set-key (kbd "<C-f5>")  'bookmark-jump)
     (global-set-key (kbd "<f6>")    'pop-to-mark-command)
     (global-set-key (kbd "<C-f6>")  'pop-global-mark)
     (global-set-key (kbd "<f10>")   'kill-this-buffer)
     (global-set-key (kbd "<C-f10>") 'save-buffers-kill-terminal)
   #+END_SRC

   Example of custom keymap.
   #+BEGIN_SRC emacs-lisp
     ;; (progn
     ;;   ;; define a prefix keymap
     ;;   (define-prefix-command 'my-modes-key-map)
     ;;   (define-key my-modes-key-map (kbd "a") 'eauc/align-array))
     ;; (global-set-key (kbd "C-e")      my-modes-key-map)
   #+END_SRC

   Enable chords globally.
   #+BEGIN_SRC emacs-lisp
   ;; (use-package use-package-chords
   ;;   :ensure t
   ;;   :config 
   ;;   (key-chord-mode 1)
   ;;   (key-chord-define-global "jy" 'aya-create)
   ;;   (key-chord-define-global "jt" 'aya-expand))
   #+END_SRC

* Custom functions

** Indent-buffer

   Indent current buffer.
   Remove trailing whitespace.
   Convert tabs to space.
   #+BEGIN_SRC emacs-lisp
     (defun eauc/indent-buffer ()
       "Indent an entire buffer using the default intenting scheme."
       (interactive)
       (save-excursion
         (delete-trailing-whitespace)
         (indent-region (point-min) (point-max) nil)
         (untabify (point-min) (point-max))))
   #+END_SRC

** Sudo

   Re-open current file with sudo.
   #+BEGIN_SRC emacs-lisp
     (defun eauc/sudo ()
       "Use TRAMP to `sudo' the current buffer"
       (interactive)
       (when buffer-file-name
         (find-alternate-file
          (concat "/sudo:root@localhost:"
                  buffer-file-name))))
   #+END_SRC

** Tangle current org file

   #+BEGIN_SRC emacs-lisp
     (defun eauc/tangle-current-org-file ()
       (when (string= (message "%s" major-mode) "org-mode")
         (org-babel-tangle)))
   #+END_SRC

* Directory browser

  Standard dired:
  - hide details when opening dired buffer.
  #+BEGIN_SRC emacs-lisp
    (defun eauc/dired-init ()
      "Init dired buffer."
      (dired-hide-details-mode))

    (use-package dired
      :hook (dired-mode . eauc/dired-init))
  #+END_SRC

  Embedded subtrees.
  #+BEGIN_SRC emacs-lisp
    (use-package dired-subtree
      :ensure t
      :pin melpa
      :bind (:map dired-mode-map
		  ("C-i" . dired-subtree-insert)
		  ("C-k" . dired-subtree-remove)
		  ("C-<up>" . dired-subtree-beginning)
		  ("C-<down>" . dired-subtree-end))
      :custom
      (dired-subtree-use-backgrounds nil "Do not use background color for subtrees"))
  #+END_SRC

  Filter trees.
  #+BEGIN_SRC emacs-lisp
    (use-package dired-filter
      :ensure t
      :pin melpa
      :config
      (define-key dired-mode-map (kbd "C-/") dired-filter-map))
  #+END_SRC

* Edition

  Move cursor by subword.
  #+BEGIN_SRC emacs-lisp
    (global-subword-mode)
  #+END_SRC

  Show trailing whitespace.
  #+BEGIN_SRC emacs-lisp
    (setq show-trailing-whitespace t)
  #+END_SRC

** Completion

   Hippie auto-complete.
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c x") 'hippie-expand)
     ;; Lisp-friendly hippie expand
     (setq hippie-expand-try-functions-list
           '(try-expand-dabbrev
             try-expand-dabbrev-all-buffers
             try-expand-dabbrev-from-kill
             try-complete-lisp-symbol-partially
             try-complete-lisp-symbol))
   #+END_SRC

   Company mode for Clojure.
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :hook
       ((cider-repl-mode . company-mode)
        (cider-mode . company-mode))
       :bind
       (("C-c c" . company-complete))
       :custom
       (company-idle-delay nil "Only complete if requested"))
   #+END_SRC

   Completion from git.
   #+BEGIN_SRC emacs-lisp
     (use-package git-complete
       :load-path "~/.emacs.d/git-complete/"
       :bind (("C-<f7>" . git-complete)))
   #+END_SRC

** Delete

   Hungry delete whitespace.
   #+BEGIN_SRC emacs-lisp
     (use-package hungry-delete
       :ensure t
       :config
       (global-hungry-delete-mode))
   #+END_SRC

** Indent

   Automatic indentation.
   #+BEGIN_SRC emacs-lisp
     (electric-indent-mode +1)
   #+END_SRC

   Indent with space.
   #+BEGIN_SRC emacs-lisp
   (setq-default indent-tabs-mode nil)
   #+END_SRC

   Default indent size.
   #+BEGIN_SRC emacs-lisp
     (setq standard-indent 2)
   #+END_SRC

   Nested groups.
   #+BEGIN_SRC emacs-lisp
     (setq custom-buffer-indent 2)
   #+END_SRC

   Web mode specifics.
   #+BEGIN_SRC emacs-lisp
     (setq web-mode-code-indent-offset 2)
     (setq web-mode-css-indent-offset 2)
     (setq web-mode-markup-indent-offset 2)
   #+END_SRC

** Jump

   Jump to word.
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :bind (("C-c a" . avy-goto-word-1)))
   #+END_SRC

   Jump to definition.
   #+BEGIN_SRC emacs-lisp
     (use-package dumb-jump
       :ensure t
       :bind (("C-c j o" . dumb-jump-go-other-window)
              ("C-c j g" . dumb-jump-go)
              ("C-c j b" . dumb-jump-back)))
   #+END_SRC

** Kill ring

   Navigate kill ring with =M-y=.
   #+BEGIN_SRC emacs-lisp
     (use-package browse-kill-ring
       :ensure t
       :config
       (browse-kill-ring-default-keybindings))
   #+END_SRC

** Mark

   Visible mark.
   #+BEGIN_SRC emacs-lisp
     (use-package visible-mark
       :ensure t
       :custom
       (visible-mark-max 5 "Maximum highlighted marks backwards")
       :config
       (global-visible-mark-mode 1))
   #+END_SRC

   Back button.
   #+BEGIN_SRC emacs-lisp
     ;; (use-package back-button
     ;;   :ensure t
     ;;   :config
     ;;   (back-button-mode 1))
   #+END_SRC

** Multicursors

   #+BEGIN_SRC emacs-lisp
     (use-package mc-extras
       :ensure t)

     (use-package multiple-cursors
       :ensure t
       :bind (("C-c . >" . mc/mark-next-like-this)
              ("C-c . <" . mc/mark-previous-like-this)
              ("C-c . a" . mc/mark-all-like-this)
              ("C-c . f" . mc/mark-all-like-this-in-defun)
              ("C-c . <left>" . mc/cycle-backward)
              ("C-c . <right>" . mc/cycle-forward)
              ("C-c . [" . mc/edit-beginnings-of-lines)
              ("C-c . ]" . mc/edit-ends-of-lines)
              ("C-c . i" . mc/insert-numbers)
              ;; ("C-c . >" . mc/mark-all-like-this-dwim)
              ("C-c . u" . mc/remove-current-cursor)))
   #+END_SRC

** Snippets

   Yasnippets.
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :custom
       (yas-snippet-dirs '("~/.emacs.d/mysnippets"))
       (yas-prompt-functions '(yas-ido-prompt) "Use ido in yasnippet prompt")
       :config
       (yas-global-mode 1)
       (define-key yas-minor-mode-map (kbd "<tab>") nil)
       (define-key yas-minor-mode-map (kbd "TAB") nil)
       (define-key yas-minor-mode-map (kbd "C-c y") 'yas-expand))
   #+END_SRC

   Auto-yasnippet.
   #+BEGIN_SRC emacs-lisp
   (use-package auto-yasnippet
     :ensure t)
   #+END_SRC
** Miscellaneous
   #+BEGIN_SRC emacs-lisp
     (use-package crux
       :ensure t
       :bind (("<S-return>" . crux-smart-open-line)
              ("<s-return>" . crux-smart-open-line-above)
              ("s-$" . crux-sudo-edit)
              ("s-<" . crux-move-beginning-of-line)
              ("s-i" . crux-find-user-init-file)
              ("s-j" . crux-top-join-line)
              ("s-k" . crux-kill-whole-line)))
   #+END_SRC

   Cycle quotes type.
   #+BEGIN_SRC emacs-lisp
     (use-package cycle-quotes
       :pin gnu
       :ensure t
       :bind (("C-'" . cycle-quotes)))
   #+END_SRC

   Expand selected region.
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :bind (("C-=" . er/expand-region)))
   #+END_SRC

* Git

** Magit

   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :bind (("<f7>" . magit-status)
              ("S-<f7>" . magit-blame)))
   #+END_SRC

** Time machine

   Step through file history.
   #+BEGIN_SRC emacs-lisp
     (use-package git-timemachine
       :ensure t)
   #+END_SRC

** Messenger

   Display last git commit message for current line.
   #+BEGIN_SRC emacs-lisp
     (use-package git-messenger
       :ensure t
       :bind (("s-<f7>" . git-messenger:popup-message))
       :custom
       (git-messenger:show-detail t))
   #+END_SRC

** Config mode

   Mode to edit git config files.
   #+BEGIN_SRC emacs-lisp
     (use-package gitconfig-mode
       :ensure t)
   #+END_SRC

* Languages
** Flycheck

   Some needed support package...
   #+BEGIN_SRC emacs-lisp
     (use-package let-alist
       :ensure t
       :pin gnu)

     (use-package exec-path-from-shell
       :ensure t
       :config
       (exec-path-from-shell-initialize))
   #+END_SRC

   Flycheck:
   - enable for all buffers.
   - disable jshint checker for javascript.
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :hook
       (after-init . global-flycheck-mode)
       :config
       (setq-default flycheck-disabled-checkers
                     (append flycheck-disabled-checkers
                             '(javascript-jshint)))
       (flycheck-add-mode 'javascript-eslint 'web-mode)
       (flycheck-add-mode 'javascript-eslint 'js-mode)
       (flycheck-add-mode 'javascript-eslint 'js2-mode)
       (flycheck-add-mode 'javascript-eslint 'js2-jsx-mode))
   #+END_SRC

** Clojure
*** Mode

    Clojure.
    #+BEGIN_SRC emacs-lisp
      (defun eauc/clojure-mode-init ()
        "Initialize Clojure mode."
        (setq inferior-lisp-program "lein repl"))

      (use-package clojure-mode
        :ensure t
        :mode ("\\.clj\\'" . clojure-mode)
        :hook
        (clojure-mode . clojure-mode-init)
        :custom
        (clojure-indent-style :align-arguments))

      (use-package clojure-mode-extra-font-locking
        :ensure t)
    #+END_SRC

    Clojurescript.
    #+BEGIN_SRC emacs-lisp
      (use-package clojurescript-mode
        :ensure t
        :pin marmalade
        :mode ("\\.cljs\\'" . clojurescript-mode))
    #+END_SRC

*** Flycheck

    #+BEGIN_SRC emacs-lisp
      (use-package flycheck-clojure
        :ensure t)
    #+END_SRC

*** Refactor

    #+BEGIN_SRC emacs-lisp
      (defun eauc/clojure-refactor-init ()
        "Initialize Clojure refactor."
        (clj-refactor-mode 1)
        (cljr-add-keybindings-with-prefix "C-c RET"))

      (use-package clj-refactor
        :ensure t
        :defer t
        :hook
        (clojure-mode . eauc/clojure-refactor-init)
        :custom
        (cljr-auto-sort-ns nil)
        (cljr-favor-prefix-notation nil))
    #+END_SRC

*** Cider

    #+BEGIN_SRC emacs-lisp
      (use-package cider
        :pin melpa-stable
        :ensure t
        :defer t
        :hook
        ((clojure-mode . cider-mode)
         (cider-mode . eldoc-mode))
        :config
        (flycheck-clojure-setup)
        :custom
        (cider-repl-pop-to-buffer-on-connect t)
        (cider-repl-history-file "~/.emacs.d/cider-history" "REPL history file")
        (cider-repl-use-pretty-printing t "nice pretty printing")
        (cider-repl-use-clojure-font-lock t "nicer font lock in REPL")
        (cider-repl-result-prefix ";; => " "result prefix for the REPL")
        (cider-repl-wrap-history t "never ending REPL history")
        (cider-repl-history-size 3000 "looong history")
        (cider-show-error-buffer t "error buffer not popping up")
        (cider-auto-select-error-buffer nil "error buffer not popping up"))
    #+END_SRC

** Cucumber

   #+BEGIN_SRC emacs-lisp
     (use-package feature-mode
       :ensure t
       :mode ("\\.feature\\'" . feature-mode))
   #+END_SRC

** Docker

   Mode to edit docker files.
   #+BEGIN_SRC emacs-lisp
     (use-package dockerfile-mode
       :ensure t
       :mode ("\\Dockerfile\\'" . dockerfile-mode))
   #+END_SRC

   Docker integration.
   #+BEGIN_SRC emacs-lisp
   (use-package docker
     :ensure t)
   #+END_SRC

** Haskell

   #+BEGIN_SRC emacs-lisp
     (use-package haskell-mode
       :ensure t
       :mode ("\\.hs\\'" . haskell-mode))
   #+END_SRC
   
** Javascript

*** Mode

    JS2 mode:
    - add mocha package key bindings to js2 mode.
    #+BEGIN_SRC emacs-lisp
    (use-package js2-mode
      :ensure t
      :interpreter (("node" . js2-jsx-mode))
      :mode (("\\.js\\'" . js2-jsx-mode)
             ("\\.es6\\'" . js2-jsx-mode))
      :bind (:map js2-mode-map
                  ("C-c m i" . mocha-test-at-point)
                  ("C-c m f" . mocha-test-file)
                  ("C-c m p" . mocha-test-project))
      :custom
      (js2-bounce-indent-p t)
      (js2-mode-indent-ignore-first-tab t)
      (js2-include-node-externs t)
      (js-indent-level 2)
      (jsx-indent-level 2)
      (js2-highlight-level 3)
      (js2-mode-assume-strict 3)
      (js2-strict-trailing-comma-warning nil)
      :custom-face
      (js2-error ((t (:foreground "red"))))
      (js2-external-variable ((t (:foreground "orchid"))))
      (js2-function-param ((t (:foreground "lime green"))))
      (js2-private-function-call ((t (:foreground "dark orange")))))
    #+END_SRC

    RJSX mode for JSX files.
    #+BEGIN_SRC emacs-lisp
    (use-package rjsx-mode
      :pin melpa
      :ensure t
      :interpreter (("node" . rjsx-mode))
      :mode (("\\.jsx\\'" . rjsx-mode)))
    #+END_SRC

*** Mocha

    #+BEGIN_SRC emacs-lisp
      (use-package mocha
        :ensure t
        :commands (mocha-test-at-point
                   mocha-test-file
                   mocha-test-project)
        :custom
        (mocha-command "./node_modules/.bin/mocha"))
    #+END_SRC

*** Npm

    #+BEGIN_SRC emacs-lisp
    (use-package npm-mode
      :ensure t
      :hook
      ((js-mode . npm-mode)
       (js2-mode . npm-mode)
       (rjsx-mode . npm-mode)))
    #+END_SRC

*** Refactor

    #+BEGIN_SRC emacs-lisp
    (use-package js2-refactor
      :ensure t
      :hook
      ((js-mode . js2-refactor-mode)
       (js2-mode . js2-refactor-mode)
       (rjsx-mode . js2-refactor-mode))
      :config
      (js2r-add-keybindings-with-prefix "C-c <return>"))
    #+END_SRC

** JSON

   #+BEGIN_SRC emacs-lisp
     (use-package json-mode
       :ensure t
       :mode "\\.json\\'")
   #+END_SRC

** Lisp

   #+BEGIN_SRC emacs-lisp
     (defun eauc/lispy-activate ()
       "Activate lispy mode."
       (lispy-mode 1))

     (use-package lispy
       :ensure t
       :bind (:map lispy-mode-map
                   ("M-[" . lispy-backward)
                   ("M-]" . lispy-forward)
                   ;; ("(" . self-insert-command)
                   (")" . self-insert-command)
                   ;; ("{" . self-insert-command)
                   ("}" . self-insert-command)
                   ("[" . self-insert-command)
                   ("]" . self-insert-command)
                   (";" . self-insert-command)
                   ("\"" . self-insert-command)
                   ("DEL" . backward-delete-char-untabify)
                   ("M-DEL" . lispy-delete-backward))
       :hook
       ((emacs-lisp-mode . eauc/lispy-activate)
        (clojure-mode . eauc/lispy-activate)
        (clojurescript-mode . eauc/lispy-activate)))
   #+END_SRC

** PHP

   #+BEGIN_SRC emacs-lisp
     (use-package php-mode
       :ensure t)
   #+END_SRC

** PlantUML

   #+BEGIN_SRC emacs-lisp
     (use-package plantuml-mode
       :ensure t
       :mode ("\\.plantuml\\'" . plantuml-mode))
   #+END_SRC

** SCSS

   #+BEGIN_SRC emacs-lisp
     (use-package scss-mode
       :ensure t
       :mode "\\.scss\\'"
       :custom
       (scss-compile-at-save nil "disable auto-compilation on save"))
   #+END_SRC

** Typescript

   #+BEGIN_SRC emacs-lisp
     (use-package typescript-mode
       :ensure t
       :mode ("\\.ts\\'" . typescript-mode))
   #+END_SRC

** YAML

   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :ensure t
       :mode ("\\.ya?ml\\'" . yaml-mode))
   #+END_SRC

* Org

  Replace Emacs default org package with last distribution.
  #+BEGIN_SRC emacs-lisp
  (use-package org
    :pin org
    :ensure org-plus-contrib
    :hook
    (after-save . eauc/tangle-current-org-file)
    :custom
    (org-confirm-babel-evaluate nil "no confirmation before running code in blocks")
    (org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar" "Ditaa jar path")
    (org-edit-src-content-indentation 0 "number of spaces added to indentation at begining of source block")
    (org-plantuml-jar-path "/usr/share/plantuml/plantuml.jar" "do not prompt before code block evaluation")
    (org-src-fontify-natively t "code block syntax highlighting")
    (org-src-tab-acts-natively t "use language indent rules in code blocks")
    (org-startup-truncated nil "truncate lines at window edge")
    :config
    (add-to-list 'org-src-lang-modes '("jsx" . rjsx))
    (add-to-list 'org-src-lang-modes '("js" . js))
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell . t)
       (js . t)
       (emacs-lisp . t)
       (calc . t)
       ;; (perl . t)
       ;; (scala . t)
       (clojure . t)
       (ditaa . t)
       (python . t)
       (ruby . t)
       (dot . t)
       (css . t)
       (plantuml . t))))
  #+END_SRC

** Bullets

   UTF-8 bullets.
   #+BEGIN_SRC emacs-lisp
     (defun eauc/org-bullets-activate ()
       "Activate org bullets."
       (org-bullets-mode 1))

     (use-package org-bullets
       :ensure t
       :hook
       (org-mode . eauc/org-bullets-activate))
   #+END_SRC

** Babel

   Javascript support.
   #+BEGIN_SRC emacs-lisp
   (use-package ob-javascript
     :load-path "~/.emacs.d/ob-javascript/"
     :custom
     (ob-javascript:browser-binary "/opt/google/chrome/chrome"))
   #+END_SRC

** Exports

   Confluence wiki.
   #+BEGIN_SRC emacs-lisp
     (use-package ox-confluence
       :load-path "~/.emacs.d/org-ox-confluence/")
   #+END_SRC

   BB code.
   #+BEGIN_SRC emacs-lisp
     ;; (use-package ox-bbcode
     ;;      :load-path "~/.emacs.d/org-ox-bbcode/")
   #+END_SRC

   Latex beamer presentations.
   #+BEGIN_SRC emacs-lisp
     (require 'ox-latex)
     (add-to-list 'org-latex-classes
                  '("beamer"
                    "\\documentclass\[presentation\]\{beamer\}"
                    ("\\section\{%s\}" . "\\section*\{%s\}")
                    ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
                    ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))
   #+END_SRC

   Markdown.
   #+BEGIN_SRC emacs-lisp
     (require 'ox-md)
   #+END_SRC

   Reveal.js presentations.
   #+BEGIN_SRC emacs-lisp
     (use-package ox-reveal
       :pin melpa
       :ensure t
       :custom
       (org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/" "where to get revealJS lib")
       (org-reveal-mathjax t "enable latex formulae in presentations"))
   #+END_SRC

   PDF.
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-latex-classes
		  '("djcb-org-article"
		    "\\documentclass[11pt,a4paper]{article}
		  \\usepackage{minted}
		  \\usemintedstyle{emacs}
		  \\newminted{common-lisp}{fontsize=10}
			  \\usepackage[T1]{fontenc}
			  \\usepackage{hyperref}
			  \\usepackage{fontspec}
			  \\usepackage{graphicx}
			  \\defaultfontfeatures{Mapping=tex-text}
			  \\setromanfont{Gentium}
			  \\setromanfont [BoldFont={Gentium Basic Bold},
					  ItalicFont={Gentium Basic Italic}]{Gentium Basic}
			  \\setsansfont{Charis SIL}
			  \\setmonofont[Scale=0.8]{DejaVu Sans Mono}
			  \\usepackage{geometry}
			  \\geometry{a4paper, textwidth=6.5in, textheight=10in,
				      marginparsep=7pt, marginparwidth=.6in}
			  \\pagestyle{empty}
			  \\title{}
				[NO-DEFAULT-PACKAGES]
				[NO-PACKAGES]"
		    ("\\section{%s}" . "\\section*{%s}")
		    ("\\subsection{%s}" . "\\subsection*{%s}")
		    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		    ("\\paragraph{%s}" . "\\paragraph*{%s}")
		    ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

     (setq org-latex-pdf-process 
	   '("xelatex --shell-escape -interaction nonstopmode %f"
	 "xelatex --shell-escape -interaction nonstopmode %f"))
   #+END_SRC

** Syntax highlighting

   #+BEGIN_SRC emacs-lisp
     (use-package htmlize
       :ensure t)
   #+END_SRC

** Table of contents.

   Generate TOC at top of org files.
   #+BEGIN_SRC emacs-lisp
     ;; (use-package toc-org
     ;;   :ensure t
     ;;   :hook
     ;;   (org-mode . toc-org-enable))
   #+END_SRC

* Projects
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :config
      (projectile-global-mode)
      ;; (projectile-register-project-type 'npm '("package.json")
      ;; 				    :compile "npm install"
      ;; 				    :test "npm test"
      ;; 				    :run "npm start"
      ;; 				    :test-suffix ".spec")
      :custom
      (projectile-switch-project-action #'projectile-dired "Open root dir in Dired when switching to project"))
  #+END_SRC
* Miscellaneous Tools

** Cheatsheet

   Emacs cheat sheet.
   #+BEGIN_SRC emacs-lisp
     (org-babel-load-file
      (expand-file-name "~/.emacs.d/cheatsheet.org"))

     (defun eauc/cheatsheet ()
       "Display cheatsheet."
       (interactive)
       (cheatsheet-show)
       (goto-char (point-min)))

     (use-package cheatsheet
       :pin melpa
       :ensure t
       :bind (("<f8>" . eauc/cheatsheet))
       :config
       (eauc/cheat-commons)
       (eauc/cheat-edition)
       (eauc/cheat-cursors)
       (eauc/cheat-jump)
       (eauc/cheat-completion)
       (eauc/cheat-snippets)
       (eauc/cheat-org)
       (eauc/cheat-clojure)
       (eauc/cheat-javascript)
       (eauc/cheat-lisp)
       (eauc/cheat-git-timemachine)
       (eauc/cheat-google)
       (eauc/cheat-rest-client))
   #+END_SRC

** Google

   Search in Google.
   #+BEGIN_SRC emacs-lisp
     (use-package google-this
       :ensure t
       :config
       (google-this-mode 1))
   #+END_SRC

** Rest Client

   Package to make HTTP request.
   #+BEGIN_SRC emacs-lisp
     (use-package restclient
       :ensure t
       :pin melpa
       :mode ("\\.http\\'" . restclient-mode))
   #+END_SRC

** Try

   Try emacs packages without installation.
   #+BEGIN_SRC emacs-lisp
     (use-package try
       :ensure t
       :pin melpa)
   #+END_SRC
