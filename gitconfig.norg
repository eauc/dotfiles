@document.meta
title: gitconfig
authors: auclair
created: 2023-04-17
updated: 2024-02-21T00:26:49+0100
version: 1.0.0
tangle: {
  languages: {
    sh: ./.gitconfig
  }
  scope: all
}
@end

* Aliases

  @code sh
  [alias]
  @end

** Diff

   Basic configuration:
   - ignore all white space, even when whitespaces were added where no whitespace before.
   - show a word diff.
   - detect file rename with 75% similarity threshold.
   @code sh
     d = diff --ignore-all-space --find-renames=75
     dc = show --ignore-all-space --find-renames=75
     dch = "!git dc HEAD"
   @end

   Diff between staging > working:
   @code sh
     dsw = "!git d"
   @end

   Diff between HEAD > working:
   @code sh
     dhw = "!git d HEAD"
   @end

   Diff between HEAD > staging:
   @code sh
     dhs = "!git d --cached"
   @end

   Diffs including submodules:
   @code sh
     dsm = "!git d; git submodule foreach 'git d'"
     dsmsw = "!git dsw; git submodule foreach 'git dsw'"
     dsmhs = "!git dhs; git submodule foreach 'git dhs'"
     dsmhw = "!git dhw; git submodule foreach 'git dhw'"
   @end

** Logs

   Basic format:
   - abbreviated commit hash :: %h yellow.
   - ref names :: %d green.
   - subject :: %s white.
   - author date, relative :: %ar magenta.
   - author name :: %an blue.
   @code sh
     log-format = log --format=format:"%C(yellow)%h%C(bold\\ green)%d%C(reset)\\ %s\\ %C(magenta)%ar\\ %C(blue)%an"
   @end

   Basic graph log:
   @code sh
     l = "!git log-format --graph"
   @end

   Log all refs:
   @code sh
     la = "!git l --all"
   @end

   With diffstat:
   @code sh
     ll = "!git la --stat"
   @end

   Log my commits:
   - author :: author name pattern filter

   @code sh
     lam = "!git la --author=Auclair"
     llm = "!git ll --author=Auclair"
   @end

   Log only HEAD:
   @code sh
     lh = "!git log-format -n 1"
     llh = "!git lh --stat"
   @end

   Order by author date:
   @code sh
     ld = "!git l --author-date-order"
     lad = "!git ld --all"
   @end

   Log one file's history:
   @code sh
     lf = "!git la --follow"
   @end

   Find commit introducing/removing string (regexp):
   - pickaxe-regex :: consider argument is a regex;
   @code sh
     li = "!logintro() { git log-format -S$1 --pickaxe-regex; }; logintro"
   @end

   Find commit with diff containing a string (regexp):
   @code sh
     lm = "!logmod() { git log-format -G$1; }; logmod"
   @end

** Stash

   Stash only working:
   - --patch :: chunked stash, implies =--keep-index=
   @code sh
     st = stash save --patch
     stw = "!git st"
   @end

   Stash staging + working:
    -we need to reset =--keep-index= flag implied by =--patch= option
   @code sh
     stsw = "!git st --no-keep-index"
   @end

   Apply & pop, restoring index:
   @code sh
     sta = stash apply --index
     stp = stash pop --index
   @end

   Inspect stashes:
   @code sh
     sts = stash show
   @end

   Inspect stashes diff:
   @code sh
     stdiff = stash show --patch
   @end

** Commit

   Shortcuts for lazy people:
   - --patch :: chunked add
   - -v :: add diff to message draft for inspection
   - --amend :: add modifications to previous commit
   - --no-edit :: use previous commit message without change
   @code sh
     ap = add --patch
     c = commit -v
     ca = "!git c --amend"
     oops = "!git ca --no-edit"
   @end

   Unstage changes:
   - --patch :: chunked unstage
   @code sh
     us = reset HEAD
     usi = reset --patch HEAD
   @end

   Add file deletions:
   @code sh
     addrm = "!git rm $(git ls-files --deleted)"
   @end

** Merges

   Shorcuts for lazy people:
   @code sh
     mt = mergetool
   @end

   Prefer no-fast-forward merges:
   @code sh
     m = merge --no-ff
   @end

   Explicit fast-forward:
   @code sh
     ff = merge --no-commit
   @end

   Fix another commit:
   @code sh
     fix = "!fixcommit() { git commit --fixup=$1; }; fixcommit"
   @end

   Squash : perform a merge but do not create a merge commit.
   Allows to get the modifications from another branch, like a merge, but without actually performing the merge.
   @code sh
     ms = merge --squash
   @end

** Reset

   Reset HEAD / Keep changes in staging + working:
   @code sh
     rh = reset --soft
   @end

   Reset HEAD + staging / Keep changes in working / Update working with <commit>:
   @code sh
     rhs = reset --merge
   @end

   Reset HEAD + staging + working:
   @code sh
     ra = reset --hard
   @end

** Cleanup

   Discard changes in working / Keep untracked:
   - --patch :: chunked discard
   @code sh
     discard = checkout --
     dis = "!git discard"
     disi = checkout --patch --
   @end

   Clean untracked:
   - remove untracked directories (-d).
   @code sh
     cl = clean -d -f
   @end

   Clean untracked + ignored:
   - remove untracked directories (-d).
   - remove ignored files (-x).
   @code sh
     purge = clean -x -d -f
   @end

** Branches

   Shortcuts for lazy people:
   @code sh
     b = branch
     bd = branch -d
   @end

   Show the current branch name:
   - --short :: show shorten branch name (=refs/heads/master -> master=)
   @code sh
     bh = symbolic-ref --short HEAD
   @end

   List all local branches:
   - -v :: show branches commit
   - -vv :: show the differences between local/remote branches
   @code sh
     bl = "!git f && git branch -vv"
   @end

   List all branches, including remotes:
   - --all : show all local/remote branches
   @code sh
     ba = "!git bl --all"
   @end

   Create branch on <commit>:
   @code sh
     bc = checkout -b
   @end

** Rebase

   Shortcuts for leazy people:
   @code sh
     rbc = "!git rebase --continue"
     rba = "!git rebase --abort"
   @end

   Rebase:
   - --interactive :: interactive by default
   @code sh
     rb = rebase --interactive
   @end

   Rebase on updated origin/master:
   @code sh
     rbm = "!git fetch && git rb origin/master"
     rbfm = "!git fetch && git rb origin/refonte-master"
   @end

   Rebase exec:
   - --exec <cmd> :: run a command after each rebased commit
   @code sh
     rbx = "!git rb --exec"
   @end

** Files

   Grep <pattern> in tracked files:
   - ignore binary files :: -I.
   - empty line between different files :: --break.
   @code sh
     g = grep -I --break
   @end

   Grep all working, also untracked files:
   @code sh
     gw = "!git g --untracked"
   @end

   Grep staging:
   @code sh
     gs = "!git g --cached"
   @end

** Remote

   Shortcuts for lazy people:
   @code sh
     p = push
     oopf = "!git oops && git pf"
   @end

   Clone:
   - always checkout submodules.
   @code sh
     clone = clone --recursive
   @end

   Basic fetch:
   - remote tags.
   - remove remote-tracking branches that do not exists on remote.
   @code sh
     f = fetch --prune --tags
   @end

   Synchronize tags with remote:
   @code sh
     ft = fetch -p origin +refs/tags/*:refs/tags/*
   @end

   Push force, respects new changes in remote:
   @code sh
     pf = push --force-with-lease
   @end

   Set remote-tracking branch:
   @code sh
     pup = push --set-upstream
     pub = "!git pup origin `git bh`"
   @end

   Check that new commits in submodules have been pushed to their remote:
   @code sh
     purc= push --recurse-submodules=check
   @end

   Push new commits in submodules when necessary:
   @code sh
     purd= push --recurse-submodules=on-demand
   @end

** Submodules

   Shortcuts for lazy people:
   @code sh
     sms = submodule status
   @end

   Show commits between last registered commit (HEAD) in super project, and current commit (Working) in submodule:
   @code sh
     smhw = submodule summary
   @end

   Show commits between last registered commit (HEAD) in super project, and commit staged (Staging) for submodule:
   @code sh
     smhs = submodule summary --cached -- HEAD
   @end

   Show commits between commit staged (Staging) in super project, and current commit (Working) in submodule:
   @code sh
     smsw = submodule summary --files
   @end

   Execute a command in each submodule, continue on fail.
   @code sh
     smf = "!foreach() { git submodule foreach \"$1 || true\"; }; foreach"
   @end

   Update submodules to commits registered in HEAD of super project:
   @code sh
     smu = submodule update
   @end

   Update modules to last commit of remote-tracked branch defined in .gitmodules:
   @code sh
     smur = submodule update --remote
   @end

** Miscellaneous

   Shortcuts for lazy people:
   @code sh
     s = status
     co = checkout
   @end

   List all aliases:
   @code sh
     lal = "!git config -l | grep alias | cut -c 7-"
   @end

   Search an alias:
   @code sh
     sal = "!search_alias() { git lal | grep -i --color \"$1\"; }; search_alias"
   @end

   Display last tag name in <commit> history:
   @code sh
     lasttag = describe --tags --abbrev=0
   @end

   Toggle ignore local modification on <path>:
   @code sh
     changed = update-index --no-assume-unchanged
     unchanged = update-index --assume-unchanged
   @end

   Retry a Git command every 2s until it succeeds:
   @code sh
     bourrin = "!retry() { until $(git $1); do sleep 2; echo "Retrying"; date; done; }; retry"
   @end

   Retrieve standard ignore files for a language:
   @code sh
     ignore = "!gi() { curl -L -s https://www.gitignore.io/api/$@ ;}; gi"
   @end

   Get/Set the project's git-hooks directory:
   @code sh
     hooks = config core.hooksPath
   @end

* User Info

  @code sh
  [user]
    name = Auclair Emmanuel
    email = auclair.emmanuel@gmail.com
  @end

* Pretty diff

  - use delta pager everywhere
  - required: install with .deb at https://github.com/dandavison/delta/releases - git-delta-musl_<version>_amd64.deb
  @code sh
  [core]
    pager = delta
  [interactive]
    diffFilter = delta --color-only
  @end

  - GitHub theme to go with kitty theme
  - display line numbers
  - activate navigate (n/N) shortcuts to jump between files
  @code sh
  [delta]
    syntax-theme = GitHub
    line-numbers = true
    navigate = true
  @end

  - activate moved code blocks support with default theme
  - show submodules commit logs in super projet diffs.
  @code sh
  [diff]
    colorMoved = default
    submodule = log
  @end

* Colors

  @code sh
  [color]
    ui = true
  [color "diff"]
    meta = "yellow bold"
    commit = "green bold"
    frag = "magenta bold"
    old = "red bold"
    new = "green bold"
    whitespace = "red reverse"
  [color "diff-highlight"]
    oldNormal = "red bold"
    oldHighlight = "red bold 52"
    newNormal = "green bold"
    newHighlight = "green bold 22"
  [color "branch"]
    current = "green reverse"
    local = green
    remote = yellow
  [color "status"]
    added = green
    changed = red
    untracked = cyan
    unmerged = magenta
  @end

* Miscellaneous

  Grep:
  - display lines numbers in results
  @code sh
  [grep]
    lineNumber = true
  @end

  Push:
  - push to origin/upstream, or <other>/<current>
  @code sh
  [push]
    default = simple
  @end

  Blame:
  - display relative dates
  @code sh
  [blame]
    date = relative
  @end

  Help:
  - auto correct git command and execute after 1x 0.1s
  @code sh
  [help]
    autocorrect = 1
  @end

  Interactive:
  - don't need to type enter after single-key shortcuts in interactive commands.
  @code sh
  [interactive]
    singleKey = true
  @end

  Pull:
  - use rebase strategie to merge
  @code sh
  [pull]
    rebase = true
  @end

  Rebase:
  - auto stash local modifs before/after rebase
  - auto fix/squash commit with message starting with =!fixup= or =!squash=
  @code sh
  [rebase]
    autostash = true
    autosquash = true
    missingCommitsCheck = ignore
  @end

  Credentials
  - remember credentials in local store
  @code sh
  [credential]
    helper = store
  @end

  Merge:
  - use `kdiff3` as mergetool
  - do not keep `.orig` backup files after successful merge
  @code sh
  [merge]
    tool = kdiff3
    conflictstyle = diff3
  [mergetool]
    keepBackup = false
  @end

  Remember conflicts resolutions
  @code sh
  [rerere]
    enabled = true
  @end
